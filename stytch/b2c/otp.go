package b2c

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"

	"github.com/stytchauth/stytch-go/v8/stytch"
	"github.com/stytchauth/stytch-go/v8/stytch/b2c/otp"
	"github.com/stytchauth/stytch-go/v8/stytch/stytcherror"
)

type OTPsClient struct {
	C        *stytch.Client
	Sms      *OTPsSmsClient
	Whatsapp *OTPsWhatsappClient
	Email    *OTPsEmailClient
}

func NewOTPsClient(c *stytch.Client) *OTPsClient {
	return &OTPsClient{
		C:        c,
		Sms:      NewOTPsSmsClient(c),
		Whatsapp: NewOTPsWhatsappClient(c),
		Email:    NewOTPsEmailClient(c),
	}
}

// Authenticate a User given a `method_id` (the associated `email_id` or `phone_id`) and a `code`. This
// endpoint verifies that the code is valid, hasn't expired or been previously used, and any optional
// security settings such as IP match or user agent match are satisfied. A given `method_id` may only have
// a single active OTP code at any given time, if a User requests another OTP code before the first one has
// expired, the first one will be invalidated.
func (c *OTPsClient) Authenticate(
	ctx context.Context,
	body *otp.AuthenticateParams,
) (*otp.AuthenticateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal otp.AuthenticateResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/otps/authenticate",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}
