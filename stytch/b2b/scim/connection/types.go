package connection

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"github.com/stytchauth/stytch-go/v15/stytch/b2b/scim"
	"github.com/stytchauth/stytch-go/v15/stytch/methodoptions"
)

// CreateParams: Request type for `Connection.Create`.
type CreateParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
	// DisplayName: A human-readable display name for the connection.
	DisplayName      string                        `json:"display_name,omitempty"`
	IdentityProvider CreateRequestIdentityProvider `json:"identity_provider,omitempty"`
}

// DeleteParams: Request type for `Connection.Delete`.
type DeleteParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
	// ConnectionID: The ID of the SCIM connection.
	ConnectionID string `json:"connection_id,omitempty"`
}

// GetGroupsParams: Request type for `Connection.GetGroups`.
type GetGroupsParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
	// ConnectionID: The ID of the SCIM connection.
	ConnectionID string `json:"connection_id,omitempty"`
	// Cursor: The `cursor` field allows you to paginate through your results. Each result array is limited to
	// 1000 results. If your query returns more than 1000 results, you will need to paginate the responses
	// using the `cursor`. If you receive a response that includes a non-null `next_cursor` in the
	// `results_metadata` object, repeat the search call with the `next_cursor` value set to the `cursor` field
	// to retrieve the next page of results. Continue to make search calls until the `next_cursor` in the
	// response is null.
	Cursor string `json:"cursor,omitempty"`
	// Limit: The number of search results to return per page. The default limit is 100. A maximum of 1000
	// results can be returned by a single search request. If the total size of your result set is greater than
	// one page size, you must paginate the response. See the `cursor` field.
	Limit uint32 `json:"limit,omitempty"`
}

// GetParams: Request type for `Connection.Get`.
type GetParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
}

// RotateCancelParams: Request type for `Connection.RotateCancel`.
type RotateCancelParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
	// ConnectionID: The ID of the SCIM connection.
	ConnectionID string `json:"connection_id,omitempty"`
}

// RotateCompleteParams: Request type for `Connection.RotateComplete`.
type RotateCompleteParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
	// ConnectionID: The ID of the SCIM connection.
	ConnectionID string `json:"connection_id,omitempty"`
}

// RotateStartParams: Request type for `Connection.RotateStart`.
type RotateStartParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
	// ConnectionID: The ID of the SCIM connection.
	ConnectionID string `json:"connection_id,omitempty"`
}

// UpdateParams: Request type for `Connection.Update`.
type UpdateParams struct {
	// OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id` is
	// critical to perform operations on an Organization, so be sure to preserve this value.
	OrganizationID string `json:"organization_id,omitempty"`
	// ConnectionID: The ID of the SCIM connection.
	ConnectionID string `json:"connection_id,omitempty"`
	// DisplayName: A human-readable display name for the connection.
	DisplayName                      string                                   `json:"display_name,omitempty"`
	IdentityProvider                 UpdateRequestIdentityProvider            `json:"identity_provider,omitempty"`
	SCIMGroupImplicitRoleAssignments []*scim.SCIMGroupImplicitRoleAssignments `json:"scim_group_implicit_role_assignments,omitempty"`
}

// CreateRequestOptions:
type CreateRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *CreateRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// DeleteRequestOptions:
type DeleteRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *DeleteRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// GetGroupsRequestOptions:
type GetGroupsRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *GetGroupsRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// GetRequestOptions:
type GetRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *GetRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// RotateCancelRequestOptions:
type RotateCancelRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *RotateCancelRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// RotateCompleteRequestOptions:
type RotateCompleteRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *RotateCompleteRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// RotateStartRequestOptions:
type RotateStartRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *RotateStartRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// UpdateRequestOptions:
type UpdateRequestOptions struct {
	// Authorization: Optional authorization object.
	// Pass in an active Stytch Member session token or session JWT and the request
	// will be run using that member's permissions.
	Authorization methodoptions.Authorization `json:"authorization,omitempty"`
}

func (o *UpdateRequestOptions) AddHeaders(headers map[string][]string) map[string][]string {
	headers = o.Authorization.AddHeaders(headers)
	return headers
}

// CreateResponse: Response type for `Connection.Create`.
type CreateResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Connection: The `SCIM Connection` object affected by this API call. See the
	// [SCIM Connection Object](https://stytch.com/docs/b2b/api/scim-connection-object) for complete response
	// field details.
	Connection *scim.SCIMConnectionWithToken `json:"connection,omitempty"`
}

// DeleteResponse: Response type for `Connection.Delete`.
type DeleteResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// ConnectionID: The `connection_id` that was deleted as part of the delete request.
	ConnectionID string `json:"connection_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

// GetGroupsResponse: Response type for `Connection.GetGroups`.
type GetGroupsResponse struct {
	// SCIMGroups: A list of SCIM Connection Groups belonging to the connection.
	SCIMGroups []scim.SCIMGroup `json:"scim_groups,omitempty"`
	StatusCode int32            `json:"status_code,omitempty"`
	// NextCursor: The `next_cursor` string is returned when your search result contains more than one page of
	// results. This value is passed into your next search call in the `cursor` field.
	NextCursor string `json:"next_cursor,omitempty"`
}

// GetResponse: Response type for `Connection.Get`.
type GetResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32                `json:"status_code,omitempty"`
	Connection *scim.SCIMConnection `json:"connection,omitempty"`
}

// RotateCancelResponse: Response type for `Connection.RotateCancel`.
type RotateCancelResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Connection: The `SCIM Connection` object affected by this API call. See the
	// [SCIM Connection Object](https://stytch.com/docs/b2b/api/scim-connection-object) for complete response
	// field details.
	Connection *scim.SCIMConnection `json:"connection,omitempty"`
}

// RotateCompleteResponse: Response type for `Connection.RotateComplete`.
type RotateCompleteResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Connection: The `SCIM Connection` object affected by this API call. See the
	// [SCIM Connection Object](https://stytch.com/docs/b2b/api/scim-connection-object) for complete response
	// field details.
	Connection *scim.SCIMConnection `json:"connection,omitempty"`
}

// RotateStartResponse: Response type for `Connection.RotateStart`.
type RotateStartResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Connection: The `SCIM Connection` object affected by this API call. See the
	// [SCIM Connection Object](https://stytch.com/docs/b2b/api/scim-connection-object) for complete response
	// field details.
	Connection *scim.SCIMConnectionWithNextToken `json:"connection,omitempty"`
}

// UpdateResponse: Response type for `Connection.Update`.
type UpdateResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Connection: The `SAML Connection` object affected by this API call. See the
	// [SAML Connection Object](https://stytch.com/docs/b2b/api/saml-connection-object) for complete response
	// field details.
	Connection *scim.SCIMConnection `json:"connection,omitempty"`
}

type CreateRequestIdentityProvider string

const (
	CreateRequestIdentityProviderGeneric        CreateRequestIdentityProvider = "generic"
	CreateRequestIdentityProviderOkta           CreateRequestIdentityProvider = "okta"
	CreateRequestIdentityProviderMicrosoftentra CreateRequestIdentityProvider = "microsoft-entra"
	CreateRequestIdentityProviderCyberark       CreateRequestIdentityProvider = "cyberark"
	CreateRequestIdentityProviderJumpcloud      CreateRequestIdentityProvider = "jumpcloud"
	CreateRequestIdentityProviderOnelogin       CreateRequestIdentityProvider = "onelogin"
	CreateRequestIdentityProviderPingfederate   CreateRequestIdentityProvider = "pingfederate"
	CreateRequestIdentityProviderRippling       CreateRequestIdentityProvider = "rippling"
)

type UpdateRequestIdentityProvider string

const (
	UpdateRequestIdentityProviderGeneric        UpdateRequestIdentityProvider = "generic"
	UpdateRequestIdentityProviderOkta           UpdateRequestIdentityProvider = "okta"
	UpdateRequestIdentityProviderMicrosoftentra UpdateRequestIdentityProvider = "microsoft-entra"
	UpdateRequestIdentityProviderCyberark       UpdateRequestIdentityProvider = "cyberark"
	UpdateRequestIdentityProviderJumpcloud      UpdateRequestIdentityProvider = "jumpcloud"
	UpdateRequestIdentityProviderOnelogin       UpdateRequestIdentityProvider = "onelogin"
	UpdateRequestIdentityProviderPingfederate   UpdateRequestIdentityProvider = "pingfederate"
	UpdateRequestIdentityProviderRippling       UpdateRequestIdentityProvider = "rippling"
)
