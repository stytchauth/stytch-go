package b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/b2b/organizations/members/connectedapps"
	"github.com/stytchauth/stytch-go/v16/stytch/stytcherror"
)

type OrganizationsMembersConnectedAppsClient struct {
	C stytch.Client
}

func NewOrganizationsMembersConnectedAppsClient(c stytch.Client) *OrganizationsMembersConnectedAppsClient {
	return &OrganizationsMembersConnectedAppsClient{
		C: c,
	}
}

// Revoke Connected App revokes a Connected App's access to a Member and revokes all active tokens that
// have been created
// on the Member's behalf. New tokens cannot be created until the Member completes a new authorization flow
// with the
// Connected App.
func (c *OrganizationsMembersConnectedAppsClient) Revoke(
	ctx context.Context,
	body *connectedapps.RevokeParams,
	methodOptions ...*connectedapps.RevokeRequestOptions,
) (*connectedapps.RevokeResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)
	for _, methodOption := range methodOptions {
		headers = methodOption.AddHeaders(headers)
	}

	var retVal connectedapps.RevokeResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        fmt.Sprintf("/v1/b2b/organizations/%s/members/%s/connected_apps/%s/revoke", body.OrganizationID, body.MemberID, body.ConnectedAppID),
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}
