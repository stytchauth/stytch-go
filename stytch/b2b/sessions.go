package b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/MicahParks/keyfunc/v2"
	"github.com/golang-jwt/jwt/v5"
	"github.com/mitchellh/mapstructure"
	"github.com/stytchauth/stytch-go/v11/stytch"
	"github.com/stytchauth/stytch-go/v11/stytch/b2b/sessions"
	"github.com/stytchauth/stytch-go/v11/stytch/stytcherror"
)

type SessionsClient struct {
	C    stytch.Client
	JWKS *keyfunc.JWKS
}

func NewSessionsClient(c stytch.Client) *SessionsClient {
	return &SessionsClient{
		C: c,
	}
}

// Get: Retrieves all active Sessions for a Member.
func (c *SessionsClient) Get(
	ctx context.Context,
	body *sessions.GetParams,
) (*sessions.GetResponse, error) {
	queryParams := make(map[string]string)
	if body != nil {
		queryParams["organization_id"] = body.OrganizationID
		queryParams["member_id"] = body.MemberID
	}

	var retVal sessions.GetResponse
	err := c.C.NewRequest(
		ctx,
		"GET",
		"/v1/b2b/sessions",
		queryParams,
		nil,
		&retVal,
	)
	return &retVal, err
}

// Authenticate: Authenticates a Session and updates its lifetime by the specified
// `session_duration_minutes`. If the `session_duration_minutes` is not specified, a Session will not be
// extended. This endpoint requires either a `session_jwt` or `session_token` be included in the request.
// It will return an error if both are present.
//
// You may provide a JWT that needs to be refreshed and is expired according to its `exp` claim. A new JWT
// will be returned if both the signature and the underlying Session are still valid.
func (c *SessionsClient) Authenticate(
	ctx context.Context,
	body *sessions.AuthenticateParams,
) (*sessions.AuthenticateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal sessions.AuthenticateResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/sessions/authenticate",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// AuthenticateWithClaims fills in the claims pointer with custom claims from the response.
// Pass in a map with the types of values you're expecting so that this function can marshal
// the claims from the response. See ExampleClient_AuthenticateWithClaims_map,
// ExampleClient_AuthenticateWithClaims_struct for examples
func (c *SessionsClient) AuthenticateWithClaims(
	ctx context.Context,
	body *sessions.AuthenticateParams,
	claims any,
) (*sessions.AuthenticateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	b, err := c.C.RawRequest(
		ctx,
		"POST",
		"/v1/b2b/sessions/authenticate",
		nil,
		jsonBody,
	)
	if err != nil {
		return nil, err
	}

	// First extract the Stytch data.
	var retVal sessions.AuthenticateResponse
	if err := json.Unmarshal(b, &retVal); err != nil {
		return nil, fmt.Errorf("unmarshal sessions.AuthenticateResponse: %w", err)
	}

	if claims == nil {
		return &retVal, nil
	}

	if m, ok := claims.(*map[string]any); ok {
		*m = retVal.MemberSession.CustomClaims
		return &retVal, nil
	}

	// This is where we need to convert claims into a claimsMap
	decoder, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
		Result:  &claims,
		TagName: "json",
	})
	if err != nil {
		return nil, err
	}

	err = decoder.Decode(retVal.MemberSession.CustomClaims)
	if err != nil {
		return nil, err
	}

	return &retVal, err
}

// Revoke a Session and immediately invalidate all its tokens. To revoke a specific Session, pass either
// the `member_session_id`, `session_token`, or `session_jwt`. To revoke all Sessions for a Member, pass
// the `member_id`.
func (c *SessionsClient) Revoke(
	ctx context.Context,
	body *sessions.RevokeParams,
) (*sessions.RevokeResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal sessions.RevokeResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/sessions/revoke",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// Exchange: Use this endpoint to exchange a Member's existing session for another session in a different
// Organization. This can be used to accept an invite, but not to create a new member via domain matching.
//
// To create a new member via domain matching, use the
// [Exchange Intermediate Session](https://stytch.com/docs/b2b/api/exchange-intermediate-session) flow
// instead.
//
// Only Email Magic Link, OAuth, and SMS OTP factors can be transferred between sessions. Other
// authentication factors, such as password factors, will not be transferred to the new session.
// SMS OTP factors can be used to fulfill MFA requirements for the target Organization if both the original
// and target Member have the same phone number and the phone number is verified for both Members.
//
// If the Member is required to complete MFA to log in to the Organization, the returned value of
// `member_authenticated` will be `false`, and an `intermediate_session_token` will be returned.
// The `intermediate_session_token` can be passed into the
// [OTP SMS Authenticate endpoint](https://stytch.com/docs/b2b/api/authenticate-otp-sms) to complete the
// MFA step and acquire a full member session.
// The `intermediate_session_token` can also be used with the
// [Exchange Intermediate Session endpoint](https://stytch.com/docs/b2b/api/exchange-intermediate-session)
// or the
// [Create Organization via Discovery endpoint](https://stytch.com/docs/b2b/api/create-organization-via-discovery) to join a different Organization or create a new one.
// The `session_duration_minutes` and `session_custom_claims` parameters will be ignored.
func (c *SessionsClient) Exchange(
	ctx context.Context,
	body *sessions.ExchangeParams,
) (*sessions.ExchangeResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal sessions.ExchangeResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/sessions/exchange",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// GetJWKS: Get the JSON Web Key Set (JWKS) for a project.
func (c *SessionsClient) GetJWKS(
	ctx context.Context,
	body *sessions.GetJWKSParams,
) (*sessions.GetJWKSResponse, error) {
	var retVal sessions.GetJWKSResponse
	err := c.C.NewRequest(
		ctx,
		"GET",
		fmt.Sprintf("/v1/b2b/sessions/jwks/%s", body.ProjectID),
		nil,
		nil,
		&retVal,
	)
	return &retVal, err
}

// MANUAL(AuthenticateJWT)(SERVICE_METHOD)
// ADDIMPORT: "encoding/json"
// ADDIMPORT: "time"
// ADDIMPORT: "github.com/golang-jwt/jwt/v5"
// ADDIMPORT: "github.com/MicahParks/keyfunc/v2"
// ADDIMPORT: "github.com/stytchauth/stytch-go/v11/stytch/stytcherror"

func (c *SessionsClient) AuthenticateJWT(
	ctx context.Context,
	params *sessions.AuthenticateJWTParams,
) (*sessions.AuthenticateResponse, error) {
	if params.Body.SessionJWT == "" || params.MaxTokenAge == time.Duration(0) {
		return c.Authenticate(ctx, params.Body)
	}

	session, err := c.AuthenticateJWTLocal(params.Body.SessionJWT, params.MaxTokenAge)
	if err != nil {
		// JWT couldn't be verified locally. Check with the Stytch API.
		return c.Authenticate(ctx, params.Body)
	}

	return &sessions.AuthenticateResponse{
		MemberSession: *session,
	}, nil
}

func (c *SessionsClient) AuthenticateJWTWithClaims(
	ctx context.Context,
	maxTokenAge time.Duration,
	body *sessions.AuthenticateParams,
	claims map[string]any,
) (*sessions.AuthenticateResponse, error) {
	if body.SessionJWT == "" || maxTokenAge == time.Duration(0) {
		return c.AuthenticateWithClaims(ctx, body, claims)
	}

	session, err := c.AuthenticateJWTLocal(body.SessionJWT, maxTokenAge)
	if err != nil {
		// JWT couldn't be verified locally. Check with the Stytch API.
		return c.Authenticate(ctx, body)
	}

	return &sessions.AuthenticateResponse{
		MemberSession: *session,
	}, nil
}

func (c *SessionsClient) AuthenticateJWTLocal(
	token string,
	maxTokenAge time.Duration,
) (*sessions.MemberSession, error) {
	if c.JWKS == nil {
		return nil, stytcherror.ErrJWKSNotInitialized
	}

	var claims sessions.Claims

	aud := c.C.GetConfig().ProjectID
	iss := fmt.Sprintf("stytch.com/%s", c.C.GetConfig().ProjectID)

	_, err := jwt.ParseWithClaims(token, &claims, c.JWKS.Keyfunc, jwt.WithAudience(aud), jwt.WithIssuer(iss))
	if err != nil {
		return nil, fmt.Errorf("failed to parse JWT: %w", err)
	}

	if claims.RegisteredClaims.IssuedAt.Add(maxTokenAge).Before(time.Now()) {
		// The JWT is valid, but older than the tolerable maximum age.
		return nil, sessions.ErrJWTTooOld
	}

	return marshalJWTIntoSession(claims)
}

func marshalJWTIntoSession(claims sessions.Claims) (*sessions.MemberSession, error) {
	// For JWTs that include it, prefer the inner expires_at claim.
	expiresAt := claims.Session.ExpiresAt
	if expiresAt == "" {
		expiresAt = claims.RegisteredClaims.ExpiresAt.Time.Format(time.RFC3339)
	}

	started, err := time.Parse(time.RFC3339, claims.Session.StartedAt)
	if err != nil {
		return nil, err
	}
	started = started.UTC()

	accessed, err := time.Parse(time.RFC3339, claims.Session.LastAccessedAt)
	if err != nil {
		return nil, err
	}
	accessed = accessed.UTC()

	expires, err := time.Parse(time.RFC3339, expiresAt)
	if err != nil {
		return nil, err
	}
	expires = expires.UTC()

	return &sessions.MemberSession{
		MemberSessionID:       claims.Session.ID,
		MemberID:              claims.RegisteredClaims.Subject,
		StartedAt:             &started,
		LastAccessedAt:        &accessed,
		ExpiresAt:             &expires,
		AuthenticationFactors: claims.Session.AuthenticationFactors,
		OrganizationID:        claims.Organization.ID,
	}, nil
}

// ENDMANUAL(AuthenticateJWT)
