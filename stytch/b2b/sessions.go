package b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/stytchauth/stytch-go/v9/stytch"
	"github.com/stytchauth/stytch-go/v9/stytch/b2b/sessions"
	"github.com/stytchauth/stytch-go/v9/stytch/stytcherror"
)

type SessionsClient struct {
	C stytch.Client
}

func NewSessionsClient(c stytch.Client) *SessionsClient {
	return &SessionsClient{
		C: c,
	}
}

// Get: Retrieves all active Sessions for a Member.
func (c *SessionsClient) Get(
	ctx context.Context,
	body *sessions.GetParams,
) (*sessions.GetResponse, error) {
	queryParams := make(map[string]string)
	if body != nil {
		queryParams["organization_id"] = body.OrganizationID
		queryParams["member_id"] = body.MemberID
	}

	var retVal sessions.GetResponse
	err := c.C.NewRequest(
		ctx,
		"GET",
		"/v1/b2b/sessions",
		queryParams,
		nil,
		&retVal,
	)
	return &retVal, err
}

// Authenticate: Authenticates a Session and updates its lifetime by the specified
// `session_duration_minutes`. If the `session_duration_minutes` is not specified, a Session will not be
// extended. This endpoint requires either a `session_jwt` or `session_token` be included in the request.
// It will return an error if both are present.
//
// You may provide a JWT that needs to be refreshed and is expired according to its `exp` claim. A new JWT
// will be returned if both the signature and the underlying Session are still valid.
func (c *SessionsClient) Authenticate(
	ctx context.Context,
	body *sessions.AuthenticateParams,
) (*sessions.AuthenticateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal sessions.AuthenticateResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/sessions/authenticate",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// Revoke a Session and immediately invalidate all its tokens. To revoke a specific Session, pass either
// the `member_session_id`, `session_token`, or `session_jwt`. To revoke all Sessions for a Member, pass
// the `member_id`.
func (c *SessionsClient) Revoke(
	ctx context.Context,
	body *sessions.RevokeParams,
) (*sessions.RevokeResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal sessions.RevokeResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/sessions/revoke",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// Exchange: Use this endpoint to exchange a Member's existing session for another session in a different
// Organization. This can be used to accept an invite, but not to create a new member via domain matching.
//
// To create a new member via domain matching, use the
// [Exchange Intermediate Session](https://stytch.com/docs/b2b/api/exchange-intermediate-session) flow
// instead.
func (c *SessionsClient) Exchange(
	ctx context.Context,
	body *sessions.ExchangeParams,
) (*sessions.ExchangeResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal sessions.ExchangeResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/sessions/exchange",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// GetJWKS: Get the JSON Web Key Set (JWKS) for a project.
func (c *SessionsClient) GetJWKS(
	ctx context.Context,
	body *sessions.GetJWKSParams,
) (*sessions.GetJWKSResponse, error) {
	var retVal sessions.GetJWKSResponse
	err := c.C.NewRequest(
		ctx,
		"GET",
		fmt.Sprintf("/v1/b2b/sessions/jwks/%s", body.ProjectID),
		nil,
		nil,
		&retVal,
	)
	return &retVal, err
}
