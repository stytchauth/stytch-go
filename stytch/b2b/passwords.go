package b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"

	"github.com/stytchauth/stytch-go/v10/stytch"
	"github.com/stytchauth/stytch-go/v10/stytch/b2b/passwords"
	"github.com/stytchauth/stytch-go/v10/stytch/stytcherror"
)

type PasswordsClient struct {
	C                stytch.Client
	Email            *PasswordsEmailClient
	Sessions         *PasswordsSessionsClient
	ExistingPassword *PasswordsExistingPasswordClient
}

func NewPasswordsClient(c stytch.Client) *PasswordsClient {
	return &PasswordsClient{
		C:                c,
		Email:            NewPasswordsEmailClient(c),
		Sessions:         NewPasswordsSessionsClient(c),
		ExistingPassword: NewPasswordsExistingPasswordClient(c),
	}
}

// StrengthCheck: This API allows you to check whether the user’s provided password is valid, and to
// provide feedback to the user on how to increase the strength of their password.
//
// This endpoint adapts to your Project's password strength configuration. If you're using
// [zxcvbn](https://stytch.com/docs/passwords#strength-requirements), the default, your passwords are
// considered valid if the strength score is >= 3. If you're using
// [LUDS](https://stytch.com/docs/passwords#strength-requirements), your passwords are considered valid if
// they meet the requirements that you've set with Stytch. You may update your password strength
// configuration in the [stytch dashboard](https://stytch.com/dashboard/password-strength-config).
//
// ## Password feedback
// The zxcvbn_feedback and luds_feedback objects contains relevant fields for you to relay feedback to
// users that failed to create a strong enough password.
//
// If you're using [zxcvbn](https://stytch.com/docs/passwords#strength-requirements), the feedback object
// will contain warning and suggestions for any password that does not meet the
// [zxcvbn](https://stytch.com/docs/passwords#strength-requirements) strength requirements. You can return
// these strings directly to the user to help them craft a strong password.
//
// If you're using [LUDS](https://stytch.com/docs/passwords#strength-requirements), the feedback object
// will contain a collection of fields that the user failed or passed. You'll want to prompt the user to
// create a password that meets all requirements that they failed.
func (c *PasswordsClient) StrengthCheck(
	ctx context.Context,
	body *passwords.StrengthCheckParams,
) (*passwords.StrengthCheckResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal passwords.StrengthCheckResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/passwords/strength_check",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// Migrate: Adds an existing password to a member's email that doesn't have a password yet. We support
// migrating members from passwords stored with bcrypt, scrypt, argon2, MD-5, SHA-1, and PBKDF2. This
// endpoint has a rate limit of 100 requests per second.
func (c *PasswordsClient) Migrate(
	ctx context.Context,
	body *passwords.MigrateParams,
) (*passwords.MigrateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal passwords.MigrateResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/passwords/migrate",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// Authenticate a member with their email address and password. This endpoint verifies that the member has
// a password currently set, and that the entered password is correct. There are two instances where the
// endpoint will return a reset_password error even if they enter their previous password:
// * The member’s credentials appeared in the HaveIBeenPwned dataset.
//   - We force a password reset to ensure that the member is the legitimate owner of the email address,
//
// and not a malicious actor abusing the compromised credentials.
// * A member that has previously authenticated with email/password uses a passwordless authentication
// method tied to the same email address (e.g. Magic Links) for the first time. Any subsequent
// email/password authentication attempt will result in this error.
//   - We force a password reset in this instance in order to safely deduplicate the account by email
//
// address, without introducing the risk of a pre-hijack account takeover attack.
//   - Imagine a bad actor creates many accounts using passwords and the known email addresses of their
//
// victims. If a victim comes to the site and logs in for the first time with an email-based passwordless
// authentication method then both the victim and the bad actor have credentials to access to the same
// account. To prevent this, any further email/password login attempts first require a password reset which
// can only be accomplished by someone with access to the underlying email address.
func (c *PasswordsClient) Authenticate(
	ctx context.Context,
	body *passwords.AuthenticateParams,
) (*passwords.AuthenticateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal passwords.AuthenticateResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/b2b/passwords/authenticate",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}
