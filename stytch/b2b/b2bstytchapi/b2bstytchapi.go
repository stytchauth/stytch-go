package b2bstytchapi

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"net/http"
	"strings"

	"github.com/stytchauth/stytch-go/v8/stytch"
	"github.com/stytchauth/stytch-go/v8/stytch/b2b"
	"github.com/stytchauth/stytch-go/v8/stytch/config"
)

type Logger interface {
	Printf(format string, v ...any)
}

type API struct {
	client                *stytch.Client
	logger                Logger
	initializationContext context.Context

	Organizations *b2b.OrganizationsClient
	Sessions      *b2b.SessionsClient
	Discovery     *b2b.DiscoveryClient
	MagicLinks    *b2b.MagicLinksClient
	Passwords     *b2b.PasswordsClient
	SSO           *b2b.SSOClient
}

type Option func(*API)

func WithLogger(logger Logger) Option {
	return func(api *API) { api.logger = logger }
}

// WithHTTPClient overrides the HTTP client used by the API client. The default value is
// &http.Client{}.
func WithHTTPClient(client *http.Client) Option {
	return func(api *API) { api.client.HTTPClient = client }
}

// WithBaseURI overrides the client base URI determined by the environment.
//
// The value derived from stytch.EnvLive or stytch.EnvTest is already correct for production use
// in the Live or Test environment, respectively. This is implemented to make it easier to use
// this client to access internal development versions of the API.
func WithBaseURI(uri string) Option {
	return func(api *API) { api.client.Config.BaseURI = config.BaseURI(uri) }
}

// WithInitializationContext overrides the context used during initialization.
//
// The context argument is used only during client setup and can be used to cancel client
// creation. After the client is created and returned, canceling the context has no effect.
// It is preferred to use this function over the less flexible NewAPIClientWithContext function,
// which will be deprecated in a future MAJOR release.
func WithInitializationContext(ctx context.Context) Option {
	return func(api *API) { api.initializationContext = ctx }
}

// NewClient returns a Stytch API client that uses the provided credentials.
//
// It detects the environment from the given projectID. You are still free to pass WithBaseURI as an option if you wish
// to override this behavior, but the intention is to provide a simpler interface for creating a client since it's
// extremely rare that developers would want to use something other than the detected environment.
func NewClient(projectID string, secret string, opts ...Option) (*API, error) {
	var detectedEnv config.Env
	if strings.HasPrefix(projectID, "project-live-") {
		detectedEnv = config.EnvLive
	} else {
		detectedEnv = config.EnvTest
	}

	a := &API{
		client:                stytch.New(detectedEnv, projectID, secret),
		initializationContext: context.Background(),
	}
	for _, o := range opts {
		o(a)
	}

	a.Organizations = b2b.NewOrganizationsClient(a.client)
	a.Sessions = b2b.NewSessionsClient(a.client)
	a.Discovery = b2b.NewDiscoveryClient(a.client)
	a.MagicLinks = b2b.NewMagicLinksClient(a.client)
	a.Passwords = b2b.NewPasswordsClient(a.client)
	a.SSO = b2b.NewSSOClient(a.client)

	return a, nil
}
