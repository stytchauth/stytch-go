package sessions

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"time"

	"github.com/stytchauth/stytch-go/v8/stytch/b2b/organizations"
	"github.com/stytchauth/stytch-go/v8/stytch/consumer/sessions"
)

// AuthenticateParams: Request type for `Authenticate`.
// Fields:
//
//   - SessionToken: A secret token for a given Stytch Session.
//
//   - SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a
//     new session if one doesn't already exist,
//     returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
//     `session_jwt` will have a fixed lifetime of
//     five minutes regardless of the underlying session duration, and will need to be refreshed over time.
//
//     This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
//
//     If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
//     extend the session this many minutes.
//
//     If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
//     60 minute duration. If you don't want
//     to use the Stytch session product, you can ignore the session fields in the response.
//
//   - SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
//
//   - SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only
//     created if a Session is initialized by providing a value in
//     `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
//     key in an existing Session, supply a new value. To
//     delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
//     `exp`, `nbf`, `iat`, `jti`) will be ignored.
//     Total custom claims size cannot exceed four kilobytes.
type AuthenticateParams struct {
	SessionToken           string         `json:"session_token,omitempty"`
	SessionDurationMinutes int32          `json:"session_duration_minutes,omitempty"`
	SessionJWT             string         `json:"session_jwt,omitempty"`
	SessionCustomClaims    map[string]any `json:"session_custom_claims,omitempty"`
}

// ExchangeParams: Request type for `Exchange`.
// Fields:
//
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
//
//   - SessionToken: The `session_token` belonging to the member that you wish to associate the email with.
//
//   - SessionJWT: The `session_jwt` belonging to the member that you wish to associate the email with.
//
//   - SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a
//     new session if one doesn't already exist,
//     returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
//     `session_jwt` will have a fixed lifetime of
//     five minutes regardless of the underlying session duration, and will need to be refreshed over time.
//
//     This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
//
//     If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
//     extend the session this many minutes.
//
//     If the `session_duration_minutes` parameter is not specified, a Stytch session will be created with a
//     60 minute duration. If you don't want
//     to use the Stytch session product, you can ignore the session fields in the response.
//
//   - SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only
//     created if a Session is initialized by providing a value in
//     `session_duration_minutes`. Claims will be included on the Session object and in the JWT. To update a
//     key in an existing Session, supply a new value. To
//     delete a key, supply a null value. Custom claims made with reserved claims (`iss`, `sub`, `aud`,
//     `exp`, `nbf`, `iat`, `jti`) will be ignored.
//     Total custom claims size cannot exceed four kilobytes.
type ExchangeParams struct {
	OrganizationID         string         `json:"organization_id,omitempty"`
	SessionToken           string         `json:"session_token,omitempty"`
	SessionJWT             string         `json:"session_jwt,omitempty"`
	SessionDurationMinutes int32          `json:"session_duration_minutes,omitempty"`
	SessionCustomClaims    map[string]any `json:"session_custom_claims,omitempty"`
}

// GetJWKSParams: Request type for `GetJWKS`.
// Fields:
//   - ProjectID: The `project_id` to get the JWKS for.
type GetJWKSParams struct {
	ProjectID string `json:"project_id,omitempty"`
}

// GetParams: Request type for `Get`.
// Fields:
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
//   - MemberID: Globally unique UUID that identifies a specific Member. The `member_id` is critical to
//     perform operations on a Member, so be sure to preserve this value.
type GetParams struct {
	OrganizationID string `json:"organization_id,omitempty"`
	MemberID       string `json:"member_id,omitempty"`
}

// MemberSession: Fields:
//   - MemberSessionID: Globally unique UUID that identifies a specific Session.
//   - MemberID: Globally unique UUID that identifies a specific Member.
//   - AuthenticationFactors: An array of different authentication factors that have initiated a Session.
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
//   - StartedAt: The timestamp when the Session was created. Values conform to the RFC 3339 standard and
//     are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
//   - LastAccessedAt: The timestamp when the Session was last accessed. Values conform to the RFC 3339
//     standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
//   - ExpiresAt: The timestamp when the Session expires. Values conform to the RFC 3339 standard and are
//     expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
//   - CustomClaims: The custom claims map for a Session. Claims can be added to a session during a
//     Sessions authenticate call.
type MemberSession struct {
	MemberSessionID       string                          `json:"member_session_id,omitempty"`
	MemberID              string                          `json:"member_id,omitempty"`
	AuthenticationFactors []sessions.AuthenticationFactor `json:"authentication_factors,omitempty"`
	OrganizationID        string                          `json:"organization_id,omitempty"`
	StartedAt             *time.Time                      `json:"started_at,omitempty"`
	LastAccessedAt        *time.Time                      `json:"last_accessed_at,omitempty"`
	ExpiresAt             *time.Time                      `json:"expires_at,omitempty"`
	CustomClaims          map[string]any                  `json:"custom_claims,omitempty"`
}

// RevokeParams: Request type for `Revoke`.
// Fields:
//   - MemberSessionID: Globally unique UUID that identifies a specific Session in the Stytch API. The
//     `member_session_id` is critical to perform operations on an Session, so be sure to preserve this value.
//   - SessionToken: A secret token for a given Stytch Session.
//   - SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
//   - MemberID: Globally unique UUID that identifies a specific Member. The `member_id` is critical to
//     perform operations on a Member, so be sure to preserve this value.
type RevokeParams struct {
	MemberSessionID string `json:"member_session_id,omitempty"`
	SessionToken    string `json:"session_token,omitempty"`
	SessionJWT      string `json:"session_jwt,omitempty"`
	MemberID        string `json:"member_id,omitempty"`
}

// AuthenticateResponse: Response type for `Authenticate`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - SessionToken: A secret token for a given Stytch Session.
//   - SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
//   - Member: The [Member object](https://stytch.com/docs/b2b/api/member-object).
//   - Organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//   - MemberSession: The [Session object](https://stytch.com/docs/b2b/api/session-object).
type AuthenticateResponse struct {
	RequestID     string                     `json:"request_id,omitempty"`
	SessionToken  string                     `json:"session_token,omitempty"`
	SessionJWT    string                     `json:"session_jwt,omitempty"`
	Member        organizations.Member       `json:"member,omitempty"`
	Organization  organizations.Organization `json:"organization,omitempty"`
	StatusCode    int32                      `json:"status_code,omitempty"`
	MemberSession MemberSession              `json:"member_session,omitempty"`
}

// ExchangeResponse: Response type for `Exchange`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - MemberID: Globally unique UUID that identifies a specific Member.
//   - SessionToken: A secret token for a given Stytch Session.
//   - SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
//   - Member: The [Member object](https://stytch.com/docs/b2b/api/member-object).
//   - Organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//   - MemberSession: The [Session object](https://stytch.com/docs/b2b/api/session-object).
type ExchangeResponse struct {
	RequestID     string                     `json:"request_id,omitempty"`
	MemberID      string                     `json:"member_id,omitempty"`
	SessionToken  string                     `json:"session_token,omitempty"`
	SessionJWT    string                     `json:"session_jwt,omitempty"`
	Member        organizations.Member       `json:"member,omitempty"`
	Organization  organizations.Organization `json:"organization,omitempty"`
	StatusCode    int32                      `json:"status_code,omitempty"`
	MemberSession MemberSession              `json:"member_session,omitempty"`
}

// GetJWKSResponse: Response type for `GetJWKS`.
// Fields:
//   - Keys: The JWK
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type GetJWKSResponse struct {
	Keys       []sessions.JWK `json:"keys,omitempty"`
	RequestID  string         `json:"request_id,omitempty"`
	StatusCode int32          `json:"status_code,omitempty"`
}

// GetResponse: Response type for `Get`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - MemberSessions: An array of [Session objects](https://stytch.com/docs/b2b/api/session-object).
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type GetResponse struct {
	RequestID      string          `json:"request_id,omitempty"`
	MemberSessions []MemberSession `json:"member_sessions,omitempty"`
	StatusCode     int32           `json:"status_code,omitempty"`
}

// RevokeResponse: Response type for `Revoke`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type RevokeResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}
