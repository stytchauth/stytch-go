package b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/stytchauth/stytch-go/v8/stytch"
	"github.com/stytchauth/stytch-go/v8/stytch/b2b/sso/oidc"
	"github.com/stytchauth/stytch-go/v8/stytch/stytcherror"
)

type SSOOIDCClient struct {
	C *stytch.Client
}

func NewSSOOIDCClient(c *stytch.Client) *SSOOIDCClient {
	return &SSOOIDCClient{
		C: c,
	}
}

// CreateConnection: Create a new OIDC Connection.
func (c *SSOOIDCClient) CreateConnection(
	ctx context.Context,
	body *oidc.CreateConnectionParams,
) (*oidc.CreateConnectionResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal oidc.CreateConnectionResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		fmt.Sprintf("/v1/b2b/sso/oidc/%s", body.OrganizationID),
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// UpdateConnection: Updates an existing OIDC connection.
//
// When the value of `issuer` changes, Stytch will attempt to retrieve the
// [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)
// document found at `$/.well-known/openid-configuration`.
// If the metadata document can be retrieved successfully, Stytch will use it to infer the values of
// `authorization_url`, `token_url`, `jwks_url`, and `userinfo_url`.
// The `client_id` and `client_secret` values cannot be inferred from the metadata document, and *must* be
// passed in explicitly.
//
// If the metadata document cannot be retrieved, Stytch will still update the connection using values from
// the request body.
//
// If the metadata document can be retrieved, and values are passed in the request body, the explicit
// values passed in from the request body will take precedence over the values inferred from the metadata
// document.
//
// Note that a newly created connection will not become active until all of the following fields are
// provided:
// * `issuer`
// * `client_id`
// * `client_secret`
// * `authorization_url`
// * `token_url`
// * `userinfo_url`
// * `jwks_url`
func (c *SSOOIDCClient) UpdateConnection(
	ctx context.Context,
	body *oidc.UpdateConnectionParams,
) (*oidc.UpdateConnectionResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal oidc.UpdateConnectionResponse
	err = c.C.NewRequest(
		ctx,
		"PUT",
		fmt.Sprintf("/v1/b2b/sso/oidc/%s/connections/%s", body.OrganizationID, body.ConnectionID),
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}
