package organizations

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// ActiveSSOConnection: Fields:
//   - ConnectionID: Globally unique UUID that identifies a specific SSO `connection_id` for a Member.
//   - DisplayName: A human-readable display name for the connection.
type ActiveSSOConnection struct {
	ConnectionID string `json:"connection_id,omitempty"`
	DisplayName  string `json:"display_name,omitempty"`
}

// CreateParams: Request type for `Organizations.Create`.
// Fields:
//
//   - OrganizationName: The name of the Organization.
//
//   - OrganizationSlug: The unique URL slug of the Organization. A minimum of two characters is required.
//     The slug only accepts alphanumeric characters and the following reserved characters: `-` `.` `_` `~`.
//
//   - OrganizationLogoURL: The image URL of the Organization logo.
//
//   - TrustedMetadata: An arbitrary JSON object for storing application-specific data or
//     identity-provider-specific data.
//
//   - SsoJitProvisioning: The authentication setting that controls the JIT provisioning of Members when
//     authenticating via SSO. The accepted values are:
//
//     `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
//     of the Organization's `sso_active_connections`.
//
//     `RESTRICTED` – only new Members with SSO logins that comply with
//     `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
//
//     `NOT_ALLOWED` – disable JIT provisioning via SSO.
//
//   - EmailAllowedDomains: An array of email domains that allow invites or JIT provisioning for new
//     Members. This list is enforced when either `email_invites` or `email_jit_provisioning` is set to
//     `RESTRICTED`.
//
//     Common domains such as `gmail.com` are not allowed. See the for the full list.
//
//   - EmailJitProvisioning: The authentication setting that controls how a new Member can be provisioned
//     by authenticating via Email Magic Link. The accepted values are:
//
//     `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
//     provisioned upon authentication via Email Magic Link.
//
//     `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link.
//
//   - EmailInvites: The authentication setting that controls how a new Member can be invited to an
//     organization by email. The accepted values are:
//
//     `ALL_ALLOWED` – any new Member can be invited to join via email.
//
//     `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
//     invited via email.
//
//     `NOT_ALLOWED` – disable email invites.
//
//   - AuthMethods: The setting that controls which authentication methods can be used by Members of an
//     Organization. The accepted values are:
//
//     `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
//
//     `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
//     This setting does not apply to Members with `is_breakglass` set to `true`.
//
//   - AllowedAuthMethods:
//     An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
//     `RESTRICTED`.
//     The list's accepted values are: `sso`, `magic_link`, and `password`.
type CreateParams struct {
	OrganizationName     string         `json:"organization_name,omitempty"`
	OrganizationSlug     string         `json:"organization_slug,omitempty"`
	OrganizationLogoURL  string         `json:"organization_logo_url,omitempty"`
	TrustedMetadata      map[string]any `json:"trusted_metadata,omitempty"`
	SsoJitProvisioning   string         `json:"sso_jit_provisioning,omitempty"`
	EmailAllowedDomains  []string       `json:"email_allowed_domains,omitempty"`
	EmailJitProvisioning string         `json:"email_jit_provisioning,omitempty"`
	EmailInvites         string         `json:"email_invites,omitempty"`
	AuthMethods          string         `json:"auth_methods,omitempty"`
	AllowedAuthMethods   []string       `json:"allowed_auth_methods,omitempty"`
}

// DeleteParams: Request type for `Organizations.Delete`.
// Fields:
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
type DeleteParams struct {
	OrganizationID string `json:"organization_id,omitempty"`
}

// GetParams: Request type for `Organizations.Get`.
// Fields:
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
type GetParams struct {
	OrganizationID string `json:"organization_id,omitempty"`
}

// Member: Fields:
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
//   - MemberID: Globally unique UUID that identifies a specific Member. The `member_id` is critical to
//     perform operations on a Member, so be sure to preserve this value.
//   - EmailAddress: The email address of the Member.
//   - Status: The status of the Member. The possible values are: `pending`, `invited`, `active`, or
//     `deleted`.
//   - Name: The name of the Member.
//   - SsoRegistrations: An array of registered [SAML Connection](saml-connection-object) objects the
//     Member has authenticated with.
//   - IsBreakglass: Identifies the Member as a break glass user - someone who has permissions to
//     authenticate into an Organization by bypassing the Organization's settings. A break glass account is
//     typically used for emergency purposes to gain access outside of normal authentication procedures. Refer
//     to the [Organization object](organization-object) and its `auth_methods` and `allowed_auth_methods`
//     fields for more details.
//   - MemberPasswordID: Globally unique UUID that identifies a Member's password.
//   - OauthRegistrations: A list of OAuth registrations for this member.
//   - TrustedMetadata: An arbitrary JSON object for storing application-specific data or
//     identity-provider-specific data.
//   - UntrustedMetadata: An arbitrary JSON object of application-specific data. These fields can be edited
//     directly by the
//     frontend SDK, and should not be used to store critical information. See the [Metadata
//     resource](https://stytch.com/docs/b2b/api/metadata)
//     for complete field behavior details.
type Member struct {
	OrganizationID     string              `json:"organization_id,omitempty"`
	MemberID           string              `json:"member_id,omitempty"`
	EmailAddress       string              `json:"email_address,omitempty"`
	Status             string              `json:"status,omitempty"`
	Name               string              `json:"name,omitempty"`
	SsoRegistrations   []SSORegistration   `json:"sso_registrations,omitempty"`
	IsBreakglass       bool                `json:"is_breakglass,omitempty"`
	MemberPasswordID   string              `json:"member_password_id,omitempty"`
	OauthRegistrations []OAuthRegistration `json:"oauth_registrations,omitempty"`
	TrustedMetadata    map[string]any      `json:"trusted_metadata,omitempty"`
	UntrustedMetadata  map[string]any      `json:"untrusted_metadata,omitempty"`
}
type OAuthRegistration struct {
	ProviderType              string `json:"provider_type,omitempty"`
	ProviderSubject           string `json:"provider_subject,omitempty"`
	MemberOauthRegistrationID string `json:"member_oauth_registration_id,omitempty"`
	ProfilePictureURL         string `json:"profile_picture_url,omitempty"`
	Locale                    string `json:"locale,omitempty"`
}

// Organization: Fields:
//
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
//
//   - OrganizationName: The name of the Organization.
//
//   - OrganizationLogoURL: The image URL of the Organization logo.
//
//   - OrganizationSlug: The unique URL slug of the Organization. A minimum of two characters is required.
//     The slug only accepts alphanumeric characters and the following reserved characters: `-` `.` `_` `~`.
//
//   - SsoJitProvisioning: The authentication setting that controls the JIT provisioning of Members when
//     authenticating via SSO. The accepted values are:
//
//     `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
//     of the Organization's `sso_active_connections`.
//
//     `RESTRICTED` – only new Members with SSO logins that comply with
//     `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
//
//     `NOT_ALLOWED` – disable JIT provisioning via SSO.
//
//   - SsoJitProvisioningAllowedConnections: An array of `connection_id`s that reference [SAML Connection
//     objects](https://stytch.com/docs/b2b/api/saml-connection-object).
//     Only these connections will be allowed to JIT provision Members via SSO when `sso_jit_provisioning` is
//     set to `RESTRICTED`.
//
//   - SsoActiveConnections: An array of active [SAML Connection
//     references](https://stytch.com/docs/b2b/api/saml-connection-object).
//
//   - EmailAllowedDomains: An array of email domains that allow invites or JIT provisioning for new
//     Members. This list is enforced when either `email_invites` or `email_jit_provisioning` is set to
//     `RESTRICTED`.
//
//     Common domains such as `gmail.com` are not allowed. See the for the full list.
//
//   - EmailJitProvisioning: The authentication setting that controls how a new Member can be provisioned
//     by authenticating via Email Magic Link. The accepted values are:
//
//     `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
//     provisioned upon authentication via Email Magic Link.
//
//     `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link.
//
//   - EmailInvites: The authentication setting that controls how a new Member can be invited to an
//     organization by email. The accepted values are:
//
//     `ALL_ALLOWED` – any new Member can be invited to join via email.
//
//     `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
//     invited via email.
//
//     `NOT_ALLOWED` – disable email invites.
//
//   - AuthMethods: The setting that controls which authentication methods can be used by Members of an
//     Organization. The accepted values are:
//
//     `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
//
//     `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
//     This setting does not apply to Members with `is_breakglass` set to `true`.
//
//   - AllowedAuthMethods:
//     An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
//     `RESTRICTED`.
//     The list's accepted values are: `sso`, `magic_link`, and `password`.
//
//   - TrustedMetadata: An arbitrary JSON object for storing application-specific data or
//     identity-provider-specific data.
//
//   - SsoDefaultConnectionID: The default connection used for SSO when there are multiple active
//     connections.
type Organization struct {
	OrganizationID                       string                `json:"organization_id,omitempty"`
	OrganizationName                     string                `json:"organization_name,omitempty"`
	OrganizationLogoURL                  string                `json:"organization_logo_url,omitempty"`
	OrganizationSlug                     string                `json:"organization_slug,omitempty"`
	SsoJitProvisioning                   string                `json:"sso_jit_provisioning,omitempty"`
	SsoJitProvisioningAllowedConnections []string              `json:"sso_jit_provisioning_allowed_connections,omitempty"`
	SsoActiveConnections                 []ActiveSSOConnection `json:"sso_active_connections,omitempty"`
	EmailAllowedDomains                  []string              `json:"email_allowed_domains,omitempty"`
	EmailJitProvisioning                 string                `json:"email_jit_provisioning,omitempty"`
	EmailInvites                         string                `json:"email_invites,omitempty"`
	AuthMethods                          string                `json:"auth_methods,omitempty"`
	AllowedAuthMethods                   []string              `json:"allowed_auth_methods,omitempty"`
	TrustedMetadata                      map[string]any        `json:"trusted_metadata,omitempty"`
	SsoDefaultConnectionID               string                `json:"sso_default_connection_id,omitempty"`
}

// ResultsMetadata: Fields:
//   - Total: The total number of results returned by your search query.
//   - NextCursor: The `next_cursor` string is returned when your search result contains more than one page
//     of results. This value is passed into your next search call in the `cursor` field.
type ResultsMetadata struct {
	Total      int32  `json:"total,omitempty"`
	NextCursor string `json:"next_cursor,omitempty"`
}

// SSORegistration: Fields:
//   - ConnectionID: Globally unique UUID that identifies a specific SSO `connection_id` for a Member.
//   - ExternalID: The id given by the identity provider.
//   - RegistrationID: The id that registers an SSO connection to a Member upon successful authentication.
//   - SsoAttributes: An object for storing SSO attributes brought over from the identity provider.
type SSORegistration struct {
	ConnectionID   string         `json:"connection_id,omitempty"`
	ExternalID     string         `json:"external_id,omitempty"`
	RegistrationID string         `json:"registration_id,omitempty"`
	SsoAttributes  map[string]any `json:"sso_attributes,omitempty"`
}

// SearchParams: Request type for `Organizations.Search`.
// Fields:
//   - Cursor: The `cursor` field allows you to paginate through your results. Each result array is limited
//     to 1000 results. If your query returns more than 1000 results, you will need to paginate the responses
//     using the `cursor`. If you receive a response that includes a non-null `next_cursor` in the
//     `results_metadata` object, repeat the search call with the `next_cursor` value set to the `cursor` field
//     to retrieve the next page of results. Continue to make search calls until the `next_cursor` in the
//     response is null.
//   - Limit: The number of search results to return per page. The default limit is 100. A maximum of 1000
//     results can be returned by a single search request. If the total size of your result set is greater than
//     one page size, you must paginate the response. See the `cursor` field.
//   - Query: The optional query object contains the operator, i.e. `AND` or `OR`, and the operands that
//     will filter your results. Only an operator is required. If you include no operands, no filtering will be
//     applied. If you include no query object, it will return all Organizations with no filtering applied.
type SearchParams struct {
	Cursor string      `json:"cursor,omitempty"`
	Limit  uint32      `json:"limit,omitempty"`
	Query  SearchQuery `json:"query,omitempty"`
}

// SearchQuery: Fields:
//
//   - Operator: The action to perform on the operands. The accepted value are:
//
//     `AND` – all the operand values provided must match.
//
//     `OR` – the operator will return any matches to at least one of the operand values you supply.
//
//   - Operands: An array of operand objects that contains all of the filters and values to apply to your
//     search query.
type SearchQuery struct {
	Operator string           `json:"operator,omitempty"`
	Operands []map[string]any `json:"operands,omitempty"`
}

// UpdateParams: Request type for `Organizations.Update`.
// Fields:
//
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
//
//   - OrganizationName: The name of the Organization.
//
//   - OrganizationSlug: The unique URL slug of the Organization. A minimum of two characters is required.
//     The slug only accepts alphanumeric characters and the following reserved characters: `-` `.` `_` `~`.
//
//   - OrganizationLogoURL: The image URL of the Organization logo.
//
//   - TrustedMetadata: An arbitrary JSON object for storing application-specific data or
//     identity-provider-specific data.
//
//   - SsoDefaultConnectionID: The default connection used for SSO when there are multiple active
//     connections.
//
//   - SsoJitProvisioning: The authentication setting that controls the JIT provisioning of Members when
//     authenticating via SSO. The accepted values are:
//
//     `ALL_ALLOWED` – new Members will be automatically provisioned upon successful authentication via any
//     of the Organization's `sso_active_connections`.
//
//     `RESTRICTED` – only new Members with SSO logins that comply with
//     `sso_jit_provisioning_allowed_connections` can be provisioned upon authentication.
//
//     `NOT_ALLOWED` – disable JIT provisioning via SSO.
//
//   - SsoJitProvisioningAllowedConnections: An array of `connection_id`s that reference [SAML Connection
//     objects](https://stytch.com/docs/b2b/api/saml-connection-object).
//     Only these connections will be allowed to JIT provision Members via SSO when `sso_jit_provisioning` is
//     set to `RESTRICTED`.
//
//   - EmailAllowedDomains: An array of email domains that allow invites or JIT provisioning for new
//     Members. This list is enforced when either `email_invites` or `email_jit_provisioning` is set to
//     `RESTRICTED`.
//
//     Common domains such as `gmail.com` are not allowed. See the for the full list.
//
//   - EmailJitProvisioning: The authentication setting that controls how a new Member can be provisioned
//     by authenticating via Email Magic Link. The accepted values are:
//
//     `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
//     provisioned upon authentication via Email Magic Link.
//
//     `NOT_ALLOWED` – disable JIT provisioning via Email Magic Link.
//
//   - EmailInvites: The authentication setting that controls how a new Member can be invited to an
//     organization by email. The accepted values are:
//
//     `ALL_ALLOWED` – any new Member can be invited to join via email.
//
//     `RESTRICTED` – only new Members with verified emails that comply with `email_allowed_domains` can be
//     invited via email.
//
//     `NOT_ALLOWED` – disable email invites.
//
//   - AuthMethods: The setting that controls which authentication methods can be used by Members of an
//     Organization. The accepted values are:
//
//     `ALL_ALLOWED` – the default setting which allows all authentication methods to be used.
//
//     `RESTRICTED` – only methods that comply with `allowed_auth_methods` can be used for authentication.
//     This setting does not apply to Members with `is_breakglass` set to `true`.
//
//   - AllowedAuthMethods:
//     An array of allowed authentication methods. This list is enforced when `auth_methods` is set to
//     `RESTRICTED`.
//     The list's accepted values are: `sso`, `magic_link`, and `password`.
type UpdateParams struct {
	OrganizationID                       string         `json:"organization_id,omitempty"`
	OrganizationName                     string         `json:"organization_name,omitempty"`
	OrganizationSlug                     string         `json:"organization_slug,omitempty"`
	OrganizationLogoURL                  string         `json:"organization_logo_url,omitempty"`
	TrustedMetadata                      map[string]any `json:"trusted_metadata,omitempty"`
	SsoDefaultConnectionID               string         `json:"sso_default_connection_id,omitempty"`
	SsoJitProvisioning                   string         `json:"sso_jit_provisioning,omitempty"`
	SsoJitProvisioningAllowedConnections []string       `json:"sso_jit_provisioning_allowed_connections,omitempty"`
	EmailAllowedDomains                  []string       `json:"email_allowed_domains,omitempty"`
	EmailJitProvisioning                 string         `json:"email_jit_provisioning,omitempty"`
	EmailInvites                         string         `json:"email_invites,omitempty"`
	AuthMethods                          string         `json:"auth_methods,omitempty"`
	AllowedAuthMethods                   []string       `json:"allowed_auth_methods,omitempty"`
}

// CreateResponse: Response type for `Organizations.Create`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - Organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type CreateResponse struct {
	RequestID    string       `json:"request_id,omitempty"`
	Organization Organization `json:"organization,omitempty"`
	StatusCode   int32        `json:"status_code,omitempty"`
}

// DeleteResponse: Response type for `Organizations.Delete`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - OrganizationID: Globally unique UUID that identifies a specific Organization. The `organization_id`
//     is critical to perform operations on an Organization, so be sure to preserve this value.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteResponse struct {
	RequestID      string `json:"request_id,omitempty"`
	OrganizationID string `json:"organization_id,omitempty"`
	StatusCode     int32  `json:"status_code,omitempty"`
}

// GetResponse: Response type for `Organizations.Get`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - Organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type GetResponse struct {
	RequestID    string       `json:"request_id,omitempty"`
	Organization Organization `json:"organization,omitempty"`
	StatusCode   int32        `json:"status_code,omitempty"`
}

// SearchResponse: Response type for `Organizations.Search`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - Organizations: An array of [Organization
//     objects](https://stytch.com/docs/b2b/api/organization-object).
//   - ResultsMetadata: The search `results_metadata` object contains metadata relevant to your specific
//     query like `total` and `next_cursor`.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type SearchResponse struct {
	RequestID       string          `json:"request_id,omitempty"`
	Organizations   []Organization  `json:"organizations,omitempty"`
	ResultsMetadata ResultsMetadata `json:"results_metadata,omitempty"`
	StatusCode      int32           `json:"status_code,omitempty"`
}

// UpdateResponse: Response type for `Organizations.Update`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//   - Organization: The [Organization object](https://stytch.com/docs/b2b/api/organization-object).
type UpdateResponse struct {
	RequestID    string       `json:"request_id,omitempty"`
	StatusCode   int32        `json:"status_code,omitempty"`
	Organization Organization `json:"organization,omitempty"`
}
