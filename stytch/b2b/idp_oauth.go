package b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"

	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/b2b/idp/oauth"
	"github.com/stytchauth/stytch-go/v16/stytch/stytcherror"
)

type IDPOAuthClient struct {
	C stytch.Client
}

func NewIDPOAuthClient(c stytch.Client) *IDPOAuthClient {
	return &IDPOAuthClient{
		C: c,
	}
}

// AuthorizeStart: Initiates a request for authorization of a Connected App to access a Member's account.
//
// Call this endpoint using the query parameters from an OAuth Authorization request.
// This endpoint validates various fields (`scope`, `client_id`, `redirect_uri`, `prompt`, etc...) are
// correct and returns
// relevant information for rendering an OAuth Consent Screen.
//
// This endpoint returns:
// - A public representation of the Connected App requesting authorization
// - Whether _explicit_ consent must be granted before proceeding with the authorization
// - A list of scopes the Member has the ability to grant the Connected App
//
// Use this response to prompt the Member for consent (if necessary) before calling the
// [Submit OAuth Authorization](https://stytch.com/docs/b2b/api/connected-apps-oauth-authorize) endpoint.
//
// Exactly one of the following must be provided to identify the Member granting authorization:
// - `organization_id` + `member_id`
// - `session_token`
// - `session_jwt`
//
// If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the Member's
// session for tracking purposes.
// One of these fields must be used if the Connected App intends to complete the
// [Exchange Access Token](https://stytch.com/docs/b2b/api/connected-app-access-token-exchange) flow.
func (c *IDPOAuthClient) AuthorizeStart(
	ctx context.Context,
	body *oauth.AuthorizeStartParams,
) (*oauth.AuthorizeStartResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal oauth.AuthorizeStartResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/b2b/idp/oauth/authorize/start",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Authorize: Completes a request for authorization of a Connected App to access a Member's account.
//
// Call this endpoint using the query parameters from an OAuth Authorization request, after previously
// validating those parameters using the
// [Preflight Check](https://stytch.com/docs/b2b/api/connected-apps-oauth-authorize-start) API.
// Note that this endpoint takes in a few additional parameters the preflight check does not- `state`,
// `nonce`, and `code_challenge`.
//
// If the authorization was successful, the `redirect_uri` will contain a valid `authorization_code`
// embedded as a query parameter.
// If the authorization was unsuccessful, the `redirect_uri` will contain an OAuth2.1 `error_code`.
// In both cases, redirect the Member to the location for the response to be consumed by the Connected App.
//
// Exactly one of the following must be provided to identify the Member granting authorization:
// - `organization_id` + `member_id`
// - `session_token`
// - `session_jwt`
//
// If a `session_token` or `session_jwt` is passed, the OAuth Authorization will be linked to the Member's
// session for tracking purposes.
// One of these fields must be used if the Connected App intends to complete the
// [Exchange Access Token](https://stytch.com/docs/b2b/api/connected-app-access-token-exchange) flow.
func (c *IDPOAuthClient) Authorize(
	ctx context.Context,
	body *oauth.AuthorizeParams,
) (*oauth.AuthorizeResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal oauth.AuthorizeResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/b2b/idp/oauth/authorize",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}
