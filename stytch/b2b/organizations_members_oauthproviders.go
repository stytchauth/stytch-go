package b2b

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"fmt"

	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/b2b/organizations/members/oauthproviders"
)

type OrganizationsMembersOAuthProvidersClient struct {
	C stytch.Client
}

func NewOrganizationsMembersOAuthProvidersClient(c stytch.Client) *OrganizationsMembersOAuthProvidersClient {
	return &OrganizationsMembersOAuthProvidersClient{
		C: c,
	}
}

// Google: Retrieve the saved Google access token and ID token for a member. After a successful OAuth
// login, Stytch will save the
// issued access token and ID token from the identity provider. If a refresh token has been issued, Stytch
// will refresh the
// access token automatically.
//
// Google One Tap does not return access tokens. If the member has only authenticated through Google One
// Tap and not through a regular Google OAuth flow, this endpoint will not return any tokens.
//
// __Note:__ Google does not issue a refresh token on every login, and refresh tokens may expire if unused.
// To force a refresh token to be issued, pass the `?provider_prompt=consent` query param into the
// [Start Google OAuth flow](https://stytch.com/docs/b2b/api/oauth-google-start) endpoint.
func (c *OrganizationsMembersOAuthProvidersClient) Google(
	ctx context.Context,
	body *oauthproviders.ProviderInformationParams,
) (*oauthproviders.GoogleResponse, error) {
	queryParams := make(map[string]string)
	if body != nil {
		if body.IncludeRefreshToken {
			queryParams["include_refresh_token"] = "true"
		} else {
			queryParams["include_refresh_token"] = "false"
		}
	}

	headers := make(map[string][]string)

	var retVal oauthproviders.GoogleResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        fmt.Sprintf("/v1/b2b/organizations/%s/members/%s/oauth_providers/google", body.OrganizationID, body.MemberID),
			QueryParams: queryParams,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Microsoft: Retrieve the saved Microsoft access token and ID token for a member. After a successful OAuth
// login, Stytch will save the
// issued access token and ID token from the identity provider. If a refresh token has been issued, Stytch
// will refresh the
// access token automatically.
func (c *OrganizationsMembersOAuthProvidersClient) Microsoft(
	ctx context.Context,
	body *oauthproviders.ProviderInformationParams,
) (*oauthproviders.MicrosoftResponse, error) {
	queryParams := make(map[string]string)
	if body != nil {
		if body.IncludeRefreshToken {
			queryParams["include_refresh_token"] = "true"
		} else {
			queryParams["include_refresh_token"] = "false"
		}
	}

	headers := make(map[string][]string)

	var retVal oauthproviders.MicrosoftResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        fmt.Sprintf("/v1/b2b/organizations/%s/members/%s/oauth_providers/microsoft", body.OrganizationID, body.MemberID),
			QueryParams: queryParams,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Slack: Retrieve the saved Slack access token and ID token for a member. After a successful OAuth login,
// Stytch will save the
// issued access token and ID token from the identity provider.
func (c *OrganizationsMembersOAuthProvidersClient) Slack(
	ctx context.Context,
	body *oauthproviders.SlackParams,
) (*oauthproviders.SlackResponse, error) {
	headers := make(map[string][]string)

	var retVal oauthproviders.SlackResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        fmt.Sprintf("/v1/b2b/organizations/%s/members/%s/oauth_providers/slack", body.OrganizationID, body.MemberID),
			QueryParams: nil,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Hubspot: Retrieve the saved Hubspot access token and ID token for a member. After a successful OAuth
// login, Stytch will save the
// issued access token and ID token from the identity provider. If a refresh token has been issued, Stytch
// will refresh the
// access token automatically.
func (c *OrganizationsMembersOAuthProvidersClient) Hubspot(
	ctx context.Context,
	body *oauthproviders.ProviderInformationParams,
) (*oauthproviders.HubspotResponse, error) {
	queryParams := make(map[string]string)
	if body != nil {
		if body.IncludeRefreshToken {
			queryParams["include_refresh_token"] = "true"
		} else {
			queryParams["include_refresh_token"] = "false"
		}
	}

	headers := make(map[string][]string)

	var retVal oauthproviders.HubspotResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        fmt.Sprintf("/v1/b2b/organizations/%s/members/%s/oauth_providers/hubspot", body.OrganizationID, body.MemberID),
			QueryParams: queryParams,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Github: Retrieve the saved GitHub access token for a Member. After a successful OAuth login, Stytch will
// save the
// issued access token from the identity provider. GitHub does not issue refresh tokens, but will
// invalidate access
// tokens after very long periods of inactivity.
func (c *OrganizationsMembersOAuthProvidersClient) Github(
	ctx context.Context,
	body *oauthproviders.ProviderInformationParams,
) (*oauthproviders.GithubResponse, error) {
	queryParams := make(map[string]string)
	if body != nil {
		if body.IncludeRefreshToken {
			queryParams["include_refresh_token"] = "true"
		} else {
			queryParams["include_refresh_token"] = "false"
		}
	}

	headers := make(map[string][]string)

	var retVal oauthproviders.GithubResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        fmt.Sprintf("/v1/b2b/organizations/%s/members/%s/oauth_providers/github", body.OrganizationID, body.MemberID),
			QueryParams: queryParams,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}
