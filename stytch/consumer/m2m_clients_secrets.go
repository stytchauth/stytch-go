package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/stytchauth/stytch-go/v10/stytch"
	"github.com/stytchauth/stytch-go/v10/stytch/consumer/m2m/clients/secrets"
	"github.com/stytchauth/stytch-go/v10/stytch/stytcherror"
)

type M2MClientsSecretsClient struct {
	C stytch.Client
}

func NewM2MClientsSecretsClient(c stytch.Client) *M2MClientsSecretsClient {
	return &M2MClientsSecretsClient{
		C: c,
	}
}

// RotateStart: Initiate the rotation of an M2M client secret. After this endpoint is called, both the
// client's `client_secret` and `next_client_secret` will be valid. To complete the secret rotation flow,
// update all usages of `client_secret` to `next_client_secret` and call
// the[Rotate Secret Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret)[Rotate Secret Endpoint](https://stytch.com/docs/api/m2m-rotate-secret) to complete the flow.
// Secret rotation can be cancelled using
// the[Rotate Cancel Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret-cancel)[Rotate Cancel Endpoint](https://stytch.com/docs/api/m2m-rotate-secret-cancel).
//
// **Important:** This is the only time you will be able to view the generated `next_client_secret` in the
// API response. Stytch stores a hash of the `next_client_secret` and cannot recover the value if lost. Be
// sure to persist the `next_client_secret` in a secure location. If the `next_client_secret` is lost, you
// will need to trigger a secret rotation flow to receive another one.
func (c *M2MClientsSecretsClient) RotateStart(
	ctx context.Context,
	body *secrets.RotateStartParams,
) (*secrets.RotateStartResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal secrets.RotateStartResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		fmt.Sprintf("/v1/m2m/clients/%s/secrets/rotate/start", body.ClientID),
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// RotateCancel: Cancel the rotation of an M2M client secret started with
// the[Start Secret Rotation Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret-start)[Start Secret Rotation Endpoint](https://stytch.com/docs/api/m2m-rotate-secret-start).
// After this endpoint is called, the client's `next_client_secret` is discarded and only the original
// `client_secret` will be valid.
func (c *M2MClientsSecretsClient) RotateCancel(
	ctx context.Context,
	body *secrets.RotateCancelParams,
) (*secrets.RotateCancelResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal secrets.RotateCancelResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		fmt.Sprintf("/v1/m2m/clients/%s/secrets/rotate/cancel", body.ClientID),
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// Rotate: Complete the rotation of an M2M client secret started with
// the[Start Secret Rotation Endpoint](https://stytch.com/docs/b2b/api/m2m-rotate-secret-start)[Start Secret Rotation Endpoint](https://stytch.com/docs/api/m2m-rotate-secret-start).
// After this endpoint is called, the client's `next_client_secret` becomes its `client_secret` and the
// previous `client_secret` will no longer be valid.
func (c *M2MClientsSecretsClient) Rotate(
	ctx context.Context,
	body *secrets.RotateParams,
) (*secrets.RotateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal secrets.RotateResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		fmt.Sprintf("/v1/m2m/clients/%s/secrets/rotate", body.ClientID),
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}
