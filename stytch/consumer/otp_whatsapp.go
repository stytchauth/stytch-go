package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"

	"github.com/stytchauth/stytch-go/v15/stytch"
	"github.com/stytchauth/stytch-go/v15/stytch/consumer/otp/whatsapp"
	"github.com/stytchauth/stytch-go/v15/stytch/stytcherror"
)

type OTPsWhatsappClient struct {
	C stytch.Client
}

func NewOTPsWhatsappClient(c stytch.Client) *OTPsWhatsappClient {
	return &OTPsWhatsappClient{
		C: c,
	}
}

// Send a One-Time Passcode (OTP) to a User's WhatsApp. If you'd like to create a user and send them a
// passcode with one request, use our
// [log in or create](https://stytch.com/docs/api/whatsapp-login-or-create) endpoint.
//
// Note that sending another OTP code before the first has expired will invalidate the first code.
//
// ### Cost to send SMS OTP
// Before configuring SMS or WhatsApp OTPs, please review how Stytch
// [bills the costs of international OTPs](https://stytch.com/pricing) and understand how to protect your
// app against [toll fraud](https://stytch.com/docs/guides/passcodes/toll-fraud/overview).
//
// ### Add a phone number to an existing user
//
// This endpoint also allows you to add a new phone number to an existing Stytch User. Including a
// `user_id`, `session_token`, or `session_jwt` in your Send one-time passcode by WhatsApp request will add
// the new, unverified phone number to the existing Stytch User. If the user successfully authenticates
// within 5 minutes, the new phone number will be marked as verified and remain permanently on the existing
// Stytch User. Otherwise, it will be removed from the User object, and any subsequent login requests using
// that phone number will create a new User.
//
// ### Next steps
//
// Collect the OTP which was delivered to the user. Call
// [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp) using the OTP `code` along with the
// `phone_id` found in the response as the `method_id`.
func (c *OTPsWhatsappClient) Send(
	ctx context.Context,
	body *whatsapp.SendParams,
) (*whatsapp.SendResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal whatsapp.SendResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/otps/whatsapp/send",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// LoginOrCreate: Send a one-time passcode (OTP) to a User's WhatsApp using their phone number. If the
// phone number is not associated with a User already, a User will be created.
//
// ### Cost to send SMS OTP
// Before configuring SMS or WhatsApp OTPs, please review how Stytch
// [bills the costs of international OTPs](https://stytch.com/pricing) and understand how to protect your
// app against [toll fraud](https://stytch.com/docs/guides/passcodes/toll-fraud/overview).
//
// ### Next steps
//
// Collect the OTP which was delivered to the User. Call
// [Authenticate OTP](https://stytch.com/docs/api/authenticate-otp) using the OTP `code` along with the
// `phone_id` found in the response as the `method_id`.
func (c *OTPsWhatsappClient) LoginOrCreate(
	ctx context.Context,
	body *whatsapp.LoginOrCreateParams,
) (*whatsapp.LoginOrCreateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal whatsapp.LoginOrCreateResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/otps/whatsapp/login_or_create",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}
