package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/m2m/clients"
	"github.com/stytchauth/stytch-go/v16/stytch/stytcherror"
)

type M2MClientsClient struct {
	C       stytch.Client
	Secrets *M2MClientsSecretsClient
}

func NewM2MClientsClient(c stytch.Client) *M2MClientsClient {
	return &M2MClientsClient{
		C: c,

		Secrets: NewM2MClientsSecretsClient(c),
	}
}

// Get: Gets information about an existing M2M Client.
func (c *M2MClientsClient) Get(
	ctx context.Context,
	body *clients.GetParams,
) (*clients.GetResponse, error) {
	headers := make(map[string][]string)

	var retVal clients.GetResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        fmt.Sprintf("/v1/m2m/clients/%s", body.ClientID),
			QueryParams: nil,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Search for M2M Clients within your Stytch Project. Submit an empty `query` in the request to return all
// M2M Clients.
//
// The following search filters are supported today:
// - `client_id`: Pass in a list of client IDs to get many clients in a single request
// - `client_name`: Search for clients by exact match on client name
// - `scopes`: Search for clients assigned a specific scope
func (c *M2MClientsClient) Search(
	ctx context.Context,
	body *clients.SearchParams,
) (*clients.SearchResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal clients.SearchResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/m2m/clients/search",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Update: Updates an existing M2M Client. You can use this endpoint to activate or deactivate a M2M Client
// by changing its `status`. A deactivated M2M Client will not be allowed to perform future token exchange
// flows until it is reactivated.
//
// **Important:** Deactivating a M2M Client will not invalidate any existing JWTs issued to the client,
// only prevent it from receiving new ones.
// To protect more-sensitive routes, pass a lower `max_token_age` value
// when[authenticating the token](https://stytch.com/docs/b2b/api/authenticate-m2m-token)[authenticating the token](https://stytch.com/docs/api/authenticate-m2m-token).
func (c *M2MClientsClient) Update(
	ctx context.Context,
	body *clients.UpdateParams,
) (*clients.UpdateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal clients.UpdateResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "PUT",
			Path:        fmt.Sprintf("/v1/m2m/clients/%s", body.ClientID),
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Delete: Deletes the M2M Client.
//
// **Important:** Deleting a M2M Client will not invalidate any existing JWTs issued to the client, only
// prevent it from receiving new ones.
// To protect more-sensitive routes, pass a lower `max_token_age` value
// when[authenticating the token](https://stytch.com/docs/b2b/api/authenticate-m2m-token)[authenticating the token](https://stytch.com/docs/api/authenticate-m2m-token).
func (c *M2MClientsClient) Delete(
	ctx context.Context,
	body *clients.DeleteParams,
) (*clients.DeleteResponse, error) {
	headers := make(map[string][]string)

	var retVal clients.DeleteResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "DELETE",
			Path:        fmt.Sprintf("/v1/m2m/clients/%s", body.ClientID),
			QueryParams: nil,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Create: Creates a new M2M Client. On initial client creation, you may pass in a custom `client_id` or
// `client_secret` to import an existing M2M client. If you do not pass in a custom `client_id` or
// `client_secret`, one will be generated automatically. The `client_id` must be unique among all clients
// in your project.
//
// **Important:** This is the only time you will be able to view the generated `client_secret` in the API
// response. Stytch stores a hash of the `client_secret` and cannot recover the value if lost. Be sure to
// persist the `client_secret` in a secure location. If the `client_secret` is lost, you will need to
// trigger a secret rotation flow to receive another one.
func (c *M2MClientsClient) Create(
	ctx context.Context,
	body *clients.CreateParams,
) (*clients.CreateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal clients.CreateResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/m2m/clients",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}
