package sessions

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"errors"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/attribute"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/users"
)

type AmazonOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type AppleOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// AttestParams: Request type for `Sessions.Attest`.
type AttestParams struct {
	// ProfileID: The ID of the trusted auth token profile to use for attestation.
	ProfileID string `json:"profile_id,omitempty"`
	// Token: The trusted auth token to authenticate.
	Token string `json:"token,omitempty"`
	// SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a new
	// session if one doesn't already exist,
	//   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
	// `session_jwt` will have a fixed lifetime of
	//   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
	//
	//   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
	//
	//   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
	// extend the session this many minutes.
	//
	//   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
	SessionDurationMinutes int32 `json:"session_duration_minutes,omitempty"`
	// SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only created
	// if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included
	// on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To
	// delete a key, supply a null value.
	//
	//   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
	// ignored. Total custom claims size cannot exceed four kilobytes.
	SessionCustomClaims map[string]any `json:"session_custom_claims,omitempty"`
	// SessionToken: The `session_token` for the session that you wish to add the trusted auth token
	// authentication factor to.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: The `session_jwt` for the session that you wish to add the trusted auth token authentication
	// factor to.
	SessionJWT string `json:"session_jwt,omitempty"`
}

// AuthenticateParams: Request type for `Sessions.Authenticate`.
type AuthenticateParams struct {
	// SessionToken: The session token to authenticate.
	SessionToken string `json:"session_token,omitempty"`
	// SessionDurationMinutes: Set the session lifetime to be this many minutes from now; minimum of 5 and a
	// maximum of 527040 minutes (366 days). Note that a successful authentication will continue to extend the
	// session this many minutes.
	SessionDurationMinutes int32 `json:"session_duration_minutes,omitempty"`
	// SessionJWT: The JWT to authenticate. You may provide a JWT that has expired according to its `exp` claim
	// and needs to be refreshed. If the signature is valid and the underlying session is still active then
	// Stytch will return a new JWT.
	SessionJWT string `json:"session_jwt,omitempty"`
	// SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only created
	// if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included
	// on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To
	// delete a key, supply a null value.
	//
	//   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
	// ignored. Total custom claims size cannot exceed four kilobytes.
	SessionCustomClaims map[string]any `json:"session_custom_claims,omitempty"`
	// AuthorizationCheck: If an `authorization_check` object is passed in, this endpoint will also check if
	// the User is
	//   authorized to perform the given action on the given Resource. A User is authorized if they are
	// assigned a Role with adequate permissions.
	//
	//   If the User is not authorized to perform the specified action on the specified Resource, a 403 error
	// will be thrown.
	//   Otherwise, the response will contain a list of Roles that satisfied the authorization check.
	AuthorizationCheck *AuthorizationCheck `json:"authorization_check,omitempty"`
}

// AuthenticationFactor:
type AuthenticationFactor struct {
	// Type: The type of authentication factor. The possible values are: `email_otp`, `impersonated`,
	// `imported`,
	//        `magic_link`, `oauth`, `otp`, `password`, `recovery_codes`, `sso`, `trusted_auth_token`, or
	// `totp`.
	Type AuthenticationFactorType `json:"type,omitempty"`
	// DeliveryMethod: The method that was used to deliver the authentication factor. The possible values
	// depend on the `type`:
	//
	//       `email_otp` – Only `email`.
	//
	//       `impersonated` – Only `impersonation`.
	//
	//       `imported` – Only `imported_auth0`.
	//
	//       `magic_link` – Only `email`.
	//
	//       `oauth` – The delivery method is determined by the specific OAuth provider used. The possible
	// values are `oauth_google`, `oauth_microsoft`, `oauth_hubspot`, `oauth_slack`, or `oauth_github`.
	//
	//         In addition, you may see an 'exchange' delivery method when a non-email-verifying OAuth factor
	// originally authenticated in one organization is exchanged for a factor in another organization.
	//         This can happen during authentication flows such as
	// [session exchange](https://stytch.com/docs/b2b/api/exchange-session).
	//         The non-email-verifying OAuth providers are Hubspot, Slack, and Github.
	//         Google is also considered non-email-verifying when the HD claim is empty.
	//         The possible exchange values are `oauth_exchange_google`, `oauth_exchange_hubspot`,
	// `oauth_exchange_slack`, or `oauth_exchange_github`.
	//
	//         The final possible value is `oauth_access_token_exchange`, if this factor came from an
	// [access token exchange flow](https://stytch.com/docs/b2b/api/connected-app-access-token-exchange).
	//
	//       `otp` –  Only `sms`.
	//
	//       `password` – Only `knowledge`.
	//
	//       `recovery_codes` – Only `recovery_code`.
	//
	//       `sso` – Either `sso_saml` or `sso_oidc`.
	//
	//       `trusted_auth_token` – Only `trusted_token_exchange`.
	//
	//       `totp` – Only `authenticator_app`.
	//
	DeliveryMethod AuthenticationFactorDeliveryMethod `json:"delivery_method,omitempty"`
	// LastAuthenticatedAt: The timestamp when the factor was last authenticated.
	LastAuthenticatedAt *time.Time `json:"last_authenticated_at,omitempty"`
	// CreatedAt: The timestamp when the factor was initially authenticated.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt: The timestamp when the factor was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// EmailFactor: Information about the email factor, if one is present.
	EmailFactor *EmailFactor `json:"email_factor,omitempty"`
	// PhoneNumberFactor: Information about the phone number factor, if one is present.
	PhoneNumberFactor *PhoneNumberFactor `json:"phone_number_factor,omitempty"`
	// GoogleOAuthFactor: Information about the Google OAuth factor, if one is present.
	GoogleOAuthFactor *GoogleOAuthFactor `json:"google_oauth_factor,omitempty"`
	// MicrosoftOAuthFactor: Information about the Microsoft OAuth factor, if one is present.
	MicrosoftOAuthFactor *MicrosoftOAuthFactor `json:"microsoft_oauth_factor,omitempty"`
	AppleOAuthFactor     *AppleOAuthFactor     `json:"apple_oauth_factor,omitempty"`
	WebAuthnFactor       *WebAuthnFactor       `json:"webauthn_factor,omitempty"`
	// AuthenticatorAppFactor: Information about the TOTP-backed Authenticator App factor, if one is present.
	AuthenticatorAppFactor *AuthenticatorAppFactor `json:"authenticator_app_factor,omitempty"`
	// GithubOAuthFactor: Information about the Github OAuth factor, if one is present.
	GithubOAuthFactor    *GithubOAuthFactor    `json:"github_oauth_factor,omitempty"`
	RecoveryCodeFactor   *RecoveryCodeFactor   `json:"recovery_code_factor,omitempty"`
	FacebookOAuthFactor  *FacebookOAuthFactor  `json:"facebook_oauth_factor,omitempty"`
	CryptoWalletFactor   *CryptoWalletFactor   `json:"crypto_wallet_factor,omitempty"`
	AmazonOAuthFactor    *AmazonOAuthFactor    `json:"amazon_oauth_factor,omitempty"`
	BitbucketOAuthFactor *BitbucketOAuthFactor `json:"bitbucket_oauth_factor,omitempty"`
	CoinbaseOAuthFactor  *CoinbaseOAuthFactor  `json:"coinbase_oauth_factor,omitempty"`
	DiscordOAuthFactor   *DiscordOAuthFactor   `json:"discord_oauth_factor,omitempty"`
	FigmaOAuthFactor     *FigmaOAuthFactor     `json:"figma_oauth_factor,omitempty"`
	GitLabOAuthFactor    *GitLabOAuthFactor    `json:"git_lab_oauth_factor,omitempty"`
	InstagramOAuthFactor *InstagramOAuthFactor `json:"instagram_oauth_factor,omitempty"`
	LinkedInOAuthFactor  *LinkedInOAuthFactor  `json:"linked_in_oauth_factor,omitempty"`
	ShopifyOAuthFactor   *ShopifyOAuthFactor   `json:"shopify_oauth_factor,omitempty"`
	// SlackOAuthFactor: Information about the Slack OAuth factor, if one is present.
	SlackOAuthFactor          *SlackOAuthFactor          `json:"slack_oauth_factor,omitempty"`
	SnapchatOAuthFactor       *SnapchatOAuthFactor       `json:"snapchat_oauth_factor,omitempty"`
	SpotifyOAuthFactor        *SpotifyOAuthFactor        `json:"spotify_oauth_factor,omitempty"`
	SteamOAuthFactor          *SteamOAuthFactor          `json:"steam_oauth_factor,omitempty"`
	TikTokOAuthFactor         *TikTokOAuthFactor         `json:"tik_tok_oauth_factor,omitempty"`
	TwitchOAuthFactor         *TwitchOAuthFactor         `json:"twitch_oauth_factor,omitempty"`
	TwitterOAuthFactor        *TwitterOAuthFactor        `json:"twitter_oauth_factor,omitempty"`
	EmbeddableMagicLinkFactor *EmbeddableMagicLinkFactor `json:"embeddable_magic_link_factor,omitempty"`
	BiometricFactor           *BiometricFactor           `json:"biometric_factor,omitempty"`
	// SAMLSSOFactor: Information about the SAML SSO factor, if one is present.
	SAMLSSOFactor *SAMLSSOFactor `json:"saml_sso_factor,omitempty"`
	// OIDCSSOFactor: Information about the OIDC SSO factor, if one is present.
	OIDCSSOFactor         *OIDCSSOFactor         `json:"oidc_sso_factor,omitempty"`
	SalesforceOAuthFactor *SalesforceOAuthFactor `json:"salesforce_oauth_factor,omitempty"`
	YahooOAuthFactor      *YahooOAuthFactor      `json:"yahoo_oauth_factor,omitempty"`
	// HubspotOAuthFactor: Information about the Hubspot OAuth factor, if one is present.
	HubspotOAuthFactor *HubspotOAuthFactor `json:"hubspot_oauth_factor,omitempty"`
	// SlackOAuthExchangeFactor: Information about the Slack OAuth Exchange factor, if one is present.
	SlackOAuthExchangeFactor *SlackOAuthExchangeFactor `json:"slack_oauth_exchange_factor,omitempty"`
	// HubspotOAuthExchangeFactor: Information about the Hubspot OAuth Exchange factor, if one is present.
	HubspotOAuthExchangeFactor *HubspotOAuthExchangeFactor `json:"hubspot_oauth_exchange_factor,omitempty"`
	// GithubOAuthExchangeFactor: Information about the Github OAuth Exchange factor, if one is present.
	GithubOAuthExchangeFactor *GithubOAuthExchangeFactor `json:"github_oauth_exchange_factor,omitempty"`
	// GoogleOAuthExchangeFactor: Information about the Google OAuth Exchange factor, if one is present.
	GoogleOAuthExchangeFactor *GoogleOAuthExchangeFactor `json:"google_oauth_exchange_factor,omitempty"`
	// ImpersonatedFactor: Information about the impersonated factor, if one is present.
	ImpersonatedFactor *ImpersonatedFactor `json:"impersonated_factor,omitempty"`
	// OAuthAccessTokenExchangeFactor: Information about the access token exchange factor, if one is present.
	OAuthAccessTokenExchangeFactor *OAuthAccessTokenExchangeFactor `json:"oauth_access_token_exchange_factor,omitempty"`
	// TrustedAuthTokenFactor: Information about the trusted auth token factor, if one is present.
	TrustedAuthTokenFactor *TrustedAuthTokenFactor `json:"trusted_auth_token_factor,omitempty"`
}

// AuthenticatorAppFactor:
type AuthenticatorAppFactor struct {
	// TOTPID: Globally unique UUID that identifies a TOTP instance.
	TOTPID string `json:"totp_id,omitempty"`
}

// AuthorizationCheck:
type AuthorizationCheck struct {
	// ResourceID: A unique identifier of the RBAC Resource, provided by the developer and intended to be
	// human-readable.
	//
	//   A `resource_id` is not allowed to start with `stytch`, which is a special prefix used for Stytch
	// default Resources with reserved `resource_id`s.
	//
	ResourceID string `json:"resource_id,omitempty"`
	// Action: An action to take on a Resource.
	Action string `json:"action,omitempty"`
}

// AuthorizationVerdict:
type AuthorizationVerdict struct {
	// Authorized: Whether the User was authorized to perform the specified action on the specified Resource.
	// Always true if the request succeeds.
	Authorized bool `json:"authorized,omitempty"`
	// GrantingRoles: The complete list of Roles that gave the User permission to perform the specified action
	// on the specified Resource.
	GrantingRoles []string `json:"granting_roles,omitempty"`
}

type BiometricFactor struct {
	BiometricRegistrationID string `json:"biometric_registration_id,omitempty"`
}

type BitbucketOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type CoinbaseOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type CryptoWalletFactor struct {
	CryptoWalletID      string `json:"crypto_wallet_id,omitempty"`
	CryptoWalletAddress string `json:"crypto_wallet_address,omitempty"`
	CryptoWalletType    string `json:"crypto_wallet_type,omitempty"`
}

type DiscordOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// EmailFactor:
type EmailFactor struct {
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
	// EmailAddress: The email address of the Member.
	EmailAddress string `json:"email_address,omitempty"`
}

type EmbeddableMagicLinkFactor struct {
	EmbeddedID string `json:"embedded_id,omitempty"`
}

// ExchangeAccessTokenParams: Request type for `Sessions.ExchangeAccessToken`.
type ExchangeAccessTokenParams struct {
	// AccessToken: The access token to exchange for a Stytch Session. Must be granted the `full_access` scope.
	AccessToken string `json:"access_token,omitempty"`
	// SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a new
	// session if one doesn't already exist,
	//   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
	// `session_jwt` will have a fixed lifetime of
	//   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
	//
	//   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
	//
	//   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
	// extend the session this many minutes.
	//
	//   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
	SessionDurationMinutes int32 `json:"session_duration_minutes,omitempty"`
	// SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only created
	// if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included
	// on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To
	// delete a key, supply a null value.
	//
	//   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
	// ignored. Total custom claims size cannot exceed four kilobytes.
	SessionCustomClaims map[string]any `json:"session_custom_claims,omitempty"`
}

type FacebookOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type FigmaOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// GetJWKSParams: Request type for `Sessions.GetJWKS`.
type GetJWKSParams struct {
	// ProjectID: The `project_id` to get the JWKS for.
	ProjectID string `json:"project_id,omitempty"`
}

// GetParams: Request type for `Sessions.Get`.
type GetParams struct {
	// UserID: The `user_id` to get active Sessions for. You may use an `external_id` here if one is set for
	// the user.
	UserID string `json:"user_id,omitempty"`
}

type GitLabOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// GithubOAuthExchangeFactor:
type GithubOAuthExchangeFactor struct {
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// GithubOAuthFactor:
type GithubOAuthFactor struct {
	// ID: The unique ID of an OAuth registration.
	ID string `json:"id,omitempty"`
	// ProviderSubject: The unique identifier for the User within a given OAuth provider. Also commonly called
	// the `sub` or "Subject field" in OAuth protocols.
	ProviderSubject string `json:"provider_subject,omitempty"`
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// GoogleOAuthExchangeFactor:
type GoogleOAuthExchangeFactor struct {
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// GoogleOAuthFactor:
type GoogleOAuthFactor struct {
	// ID: The unique ID of an OAuth registration.
	ID string `json:"id,omitempty"`
	// ProviderSubject: The unique identifier for the User within a given OAuth provider. Also commonly called
	// the `sub` or "Subject field" in OAuth protocols.
	ProviderSubject string `json:"provider_subject,omitempty"`
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// HubspotOAuthExchangeFactor:
type HubspotOAuthExchangeFactor struct {
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// HubspotOAuthFactor:
type HubspotOAuthFactor struct {
	// ID: The unique ID of an OAuth registration.
	ID string `json:"id,omitempty"`
	// ProviderSubject: The unique identifier for the User within a given OAuth provider. Also commonly called
	// the `sub` or "Subject field" in OAuth protocols.
	ProviderSubject string `json:"provider_subject,omitempty"`
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// ImpersonatedFactor:
type ImpersonatedFactor struct {
	// ImpersonatorID: For impersonated sessions initiated via the Stytch Dashboard, the `impersonator_id` will
	// be the impersonator's Stytch Dashboard `member_id`.
	ImpersonatorID string `json:"impersonator_id,omitempty"`
	// ImpersonatorEmailAddress: The email address of the impersonator.
	ImpersonatorEmailAddress string `json:"impersonator_email_address,omitempty"`
}

type InstagramOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type JWK struct {
	Kty     string   `json:"kty,omitempty"`
	Use     string   `json:"use,omitempty"`
	KeyOps  []string `json:"key_ops,omitempty"`
	Alg     string   `json:"alg,omitempty"`
	Kid     string   `json:"kid,omitempty"`
	X5C     []string `json:"x5c,omitempty"`
	X5TS256 string   `json:"x5t_s256,omitempty"`
	N       string   `json:"n,omitempty"`
	E       string   `json:"e,omitempty"`
}

type LinkedInOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// MicrosoftOAuthFactor:
type MicrosoftOAuthFactor struct {
	// ID: The unique ID of an OAuth registration.
	ID string `json:"id,omitempty"`
	// ProviderSubject: The unique identifier for the User within a given OAuth provider. Also commonly called
	// the `sub` or "Subject field" in OAuth protocols.
	ProviderSubject string `json:"provider_subject,omitempty"`
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// MigrateParams: Request type for `Sessions.Migrate`.
type MigrateParams struct {
	// SessionToken: The authorization token Stytch will pass in to the external userinfo endpoint.
	SessionToken string `json:"session_token,omitempty"`
	// SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a new
	// session if one doesn't already exist,
	//   returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
	// `session_jwt` will have a fixed lifetime of
	//   five minutes regardless of the underlying session duration, and will need to be refreshed over time.
	//
	//   This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
	//
	//   If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
	// extend the session this many minutes.
	//
	//   If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
	SessionDurationMinutes int32 `json:"session_duration_minutes,omitempty"`
	// SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only created
	// if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be included
	// on the Session object and in the JWT. To update a key in an existing Session, supply a new value. To
	// delete a key, supply a null value.
	//
	//   Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
	// ignored. Total custom claims size cannot exceed four kilobytes.
	SessionCustomClaims map[string]any `json:"session_custom_claims,omitempty"`
}

// OAuthAccessTokenExchangeFactor:
type OAuthAccessTokenExchangeFactor struct {
	// ClientID: The ID of the Connected App client.
	ClientID string `json:"client_id,omitempty"`
}

// OIDCSSOFactor:
type OIDCSSOFactor struct {
	// ID: The unique ID of an SSO Registration.
	ID string `json:"id,omitempty"`
	// ProviderID: Globally unique UUID that identifies a specific OIDC Connection.
	ProviderID string `json:"provider_id,omitempty"`
	// ExternalID: The ID of the member given by the identity provider.
	ExternalID string `json:"external_id,omitempty"`
}

// PhoneNumberFactor:
type PhoneNumberFactor struct {
	// PhoneID: The globally unique UUID of the Member's phone number.
	PhoneID string `json:"phone_id,omitempty"`
	// PhoneNumber: The phone number of the Member.
	PhoneNumber string `json:"phone_number,omitempty"`
}

type RecoveryCodeFactor struct {
	TOTPRecoveryCodeID string `json:"totp_recovery_code_id,omitempty"`
}

// RevokeParams: Request type for `Sessions.Revoke`.
type RevokeParams struct {
	// SessionID: The `session_id` to revoke.
	SessionID string `json:"session_id,omitempty"`
	// SessionToken: The session token to revoke.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: A JWT for the session to revoke.
	SessionJWT string `json:"session_jwt,omitempty"`
}

// SAMLSSOFactor:
type SAMLSSOFactor struct {
	// ID: The unique ID of an SSO Registration.
	ID string `json:"id,omitempty"`
	// ProviderID: Globally unique UUID that identifies a specific SAML Connection.
	ProviderID string `json:"provider_id,omitempty"`
	// ExternalID: The ID of the member given by the identity provider.
	ExternalID string `json:"external_id,omitempty"`
}

type SalesforceOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// Session:
type Session struct {
	// SessionID: A unique identifier for a specific Session.
	SessionID string `json:"session_id,omitempty"`
	// UserID: The unique ID of the affected User.
	UserID string `json:"user_id,omitempty"`
	// AuthenticationFactors: An array of different authentication factors that comprise a Session.
	AuthenticationFactors []AuthenticationFactor `json:"authentication_factors,omitempty"`
	// StartedAt: The timestamp when the Session was created. Values conform to the RFC 3339 standard and are
	// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// LastAccessedAt: The timestamp when the Session was last accessed. Values conform to the RFC 3339
	// standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
	LastAccessedAt *time.Time `json:"last_accessed_at,omitempty"`
	// ExpiresAt: The timestamp when the Session expires. Values conform to the RFC 3339 standard and are
	// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Attributes: Provided attributes help with fraud detection.
	Attributes *attribute.Attributes `json:"attributes,omitempty"`
	// CustomClaims: The custom claims map for a Session. Claims can be added to a session during a Sessions
	// authenticate call.
	CustomClaims map[string]any `json:"custom_claims,omitempty"`
}

type ShopifyOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// SlackOAuthExchangeFactor:
type SlackOAuthExchangeFactor struct {
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

// SlackOAuthFactor:
type SlackOAuthFactor struct {
	// ID: The unique ID of an OAuth registration.
	ID string `json:"id,omitempty"`
	// ProviderSubject: The unique identifier for the User within a given OAuth provider. Also commonly called
	// the `sub` or "Subject field" in OAuth protocols.
	ProviderSubject string `json:"provider_subject,omitempty"`
	// EmailID: The globally unique UUID of the Member's email.
	EmailID string `json:"email_id,omitempty"`
}

type SnapchatOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type SpotifyOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type SteamOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type TikTokOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// TrustedAuthTokenFactor:
type TrustedAuthTokenFactor struct {
	// TokenID: The ID of the trusted auth token.
	TokenID string `json:"token_id,omitempty"`
}

type TwitchOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type TwitterOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

type WebAuthnFactor struct {
	WebAuthnRegistrationID string `json:"webauthn_registration_id,omitempty"`
	Domain                 string `json:"domain,omitempty"`
	UserAgent              string `json:"user_agent,omitempty"`
}

type YahooOAuthFactor struct {
	ID              string `json:"id,omitempty"`
	ProviderSubject string `json:"provider_subject,omitempty"`
	EmailID         string `json:"email_id,omitempty"`
}

// AttestResponse: Response type for `Sessions.Attest`.
type AttestResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// UserID: The unique ID of the affected User.
	UserID string `json:"user_id,omitempty"`
	// SessionToken: A secret token for a given Stytch Session.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
	SessionJWT string `json:"session_jwt,omitempty"`
	// User: The `user` object affected by this API call. See the
	// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
	User users.User `json:"user,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Session: If you initiate a Session, by including `session_duration_minutes` in your authenticate call,
	// you'll receive a full Session object in the response.
	//
	//   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
	//
	Session *Session `json:"session,omitempty"`
}

// AuthenticateResponse: Response type for `Sessions.Authenticate`.
type AuthenticateResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// Session: If you initiate a Session, by including `session_duration_minutes` in your authenticate call,
	// you'll receive a full Session object in the response.
	//
	//   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
	//
	Session Session `json:"session,omitempty"`
	// SessionToken: A secret token for a given Stytch Session.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
	SessionJWT string `json:"session_jwt,omitempty"`
	// User: The `user` object affected by this API call. See the
	// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
	User users.User `json:"user,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Verdict: If an `authorization_check` is provided in the request and the check succeeds, this field will
	// return
	//   information about why the User was granted permission.
	Verdict *AuthorizationVerdict `json:"verdict,omitempty"`
}

// ExchangeAccessTokenResponse: Response type for `Sessions.ExchangeAccessToken`.
type ExchangeAccessTokenResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// UserID: The unique ID of the affected User.
	UserID string `json:"user_id,omitempty"`
	// SessionToken: A secret token for a given Stytch Session.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
	SessionJWT string `json:"session_jwt,omitempty"`
	// User: The `user` object affected by this API call. See the
	// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
	User users.User `json:"user,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// Session: If you initiate a Session, by including `session_duration_minutes` in your authenticate call,
	// you'll receive a full Session object in the response.
	//
	//   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
	//
	Session *Session `json:"session,omitempty"`
}

// GetJWKSResponse: Response type for `Sessions.GetJWKS`.
type GetJWKSResponse struct {
	// Keys: The list of JWKs associated with the project.
	Keys []JWK `json:"keys,omitempty"`
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

// GetResponse: Response type for `Sessions.Get`.
type GetResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// Sessions: An array of [Session objects](https://stytch.com/docs/api/session-object).
	Sessions []Session `json:"sessions,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

// MigrateResponse: Response type for `Sessions.Migrate`.
type MigrateResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// UserID: The unique ID of the affected User.
	UserID string `json:"user_id,omitempty"`
	// SessionToken: A secret token for a given Stytch Session.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
	SessionJWT string `json:"session_jwt,omitempty"`
	// User: The `user` object affected by this API call. See the
	// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
	User       users.User `json:"user,omitempty"`
	StatusCode int32      `json:"status_code,omitempty"`
	// Session: If you initiate a Session, by including `session_duration_minutes` in your authenticate call,
	// you'll receive a full Session object in the response.
	//
	//   See [Session object](https://stytch.com/docs/api/session-object) for complete response fields.
	//
	Session *Session `json:"session,omitempty"`
}

// RevokeResponse: Response type for `Sessions.Revoke`.
type RevokeResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

type AuthenticationFactorDeliveryMethod string

const (
	AuthenticationFactorDeliveryMethodEmail                    AuthenticationFactorDeliveryMethod = "email"
	AuthenticationFactorDeliveryMethodSms                      AuthenticationFactorDeliveryMethod = "sms"
	AuthenticationFactorDeliveryMethodWhatsapp                 AuthenticationFactorDeliveryMethod = "whatsapp"
	AuthenticationFactorDeliveryMethodEmbedded                 AuthenticationFactorDeliveryMethod = "embedded"
	AuthenticationFactorDeliveryMethodOAuthGoogle              AuthenticationFactorDeliveryMethod = "oauth_google"
	AuthenticationFactorDeliveryMethodOAuthMicrosoft           AuthenticationFactorDeliveryMethod = "oauth_microsoft"
	AuthenticationFactorDeliveryMethodOAuthApple               AuthenticationFactorDeliveryMethod = "oauth_apple"
	AuthenticationFactorDeliveryMethodWebAuthnRegistration     AuthenticationFactorDeliveryMethod = "webauthn_registration"
	AuthenticationFactorDeliveryMethodAuthenticatorApp         AuthenticationFactorDeliveryMethod = "authenticator_app"
	AuthenticationFactorDeliveryMethodOAuthGithub              AuthenticationFactorDeliveryMethod = "oauth_github"
	AuthenticationFactorDeliveryMethodRecoveryCode             AuthenticationFactorDeliveryMethod = "recovery_code"
	AuthenticationFactorDeliveryMethodOAuthFacebook            AuthenticationFactorDeliveryMethod = "oauth_facebook"
	AuthenticationFactorDeliveryMethodCryptoWallet             AuthenticationFactorDeliveryMethod = "crypto_wallet"
	AuthenticationFactorDeliveryMethodOAuthAmazon              AuthenticationFactorDeliveryMethod = "oauth_amazon"
	AuthenticationFactorDeliveryMethodOAuthBitbucket           AuthenticationFactorDeliveryMethod = "oauth_bitbucket"
	AuthenticationFactorDeliveryMethodOAuthCoinbase            AuthenticationFactorDeliveryMethod = "oauth_coinbase"
	AuthenticationFactorDeliveryMethodOAuthDiscord             AuthenticationFactorDeliveryMethod = "oauth_discord"
	AuthenticationFactorDeliveryMethodOAuthFigma               AuthenticationFactorDeliveryMethod = "oauth_figma"
	AuthenticationFactorDeliveryMethodOAuthGitlab              AuthenticationFactorDeliveryMethod = "oauth_gitlab"
	AuthenticationFactorDeliveryMethodOAuthInstagram           AuthenticationFactorDeliveryMethod = "oauth_instagram"
	AuthenticationFactorDeliveryMethodOAuthLinkedin            AuthenticationFactorDeliveryMethod = "oauth_linkedin"
	AuthenticationFactorDeliveryMethodOAuthShopify             AuthenticationFactorDeliveryMethod = "oauth_shopify"
	AuthenticationFactorDeliveryMethodOAuthSlack               AuthenticationFactorDeliveryMethod = "oauth_slack"
	AuthenticationFactorDeliveryMethodOAuthSnapchat            AuthenticationFactorDeliveryMethod = "oauth_snapchat"
	AuthenticationFactorDeliveryMethodOAuthSpotify             AuthenticationFactorDeliveryMethod = "oauth_spotify"
	AuthenticationFactorDeliveryMethodOAuthSteam               AuthenticationFactorDeliveryMethod = "oauth_steam"
	AuthenticationFactorDeliveryMethodOAuthTiktok              AuthenticationFactorDeliveryMethod = "oauth_tiktok"
	AuthenticationFactorDeliveryMethodOAuthTwitch              AuthenticationFactorDeliveryMethod = "oauth_twitch"
	AuthenticationFactorDeliveryMethodOAuthTwitter             AuthenticationFactorDeliveryMethod = "oauth_twitter"
	AuthenticationFactorDeliveryMethodKnowledge                AuthenticationFactorDeliveryMethod = "knowledge"
	AuthenticationFactorDeliveryMethodBiometric                AuthenticationFactorDeliveryMethod = "biometric"
	AuthenticationFactorDeliveryMethodSSOSAML                  AuthenticationFactorDeliveryMethod = "sso_saml"
	AuthenticationFactorDeliveryMethodSSOOIDC                  AuthenticationFactorDeliveryMethod = "sso_oidc"
	AuthenticationFactorDeliveryMethodOAuthSalesforce          AuthenticationFactorDeliveryMethod = "oauth_salesforce"
	AuthenticationFactorDeliveryMethodOAuthYahoo               AuthenticationFactorDeliveryMethod = "oauth_yahoo"
	AuthenticationFactorDeliveryMethodOAuthHubspot             AuthenticationFactorDeliveryMethod = "oauth_hubspot"
	AuthenticationFactorDeliveryMethodImportedAuth0            AuthenticationFactorDeliveryMethod = "imported_auth0"
	AuthenticationFactorDeliveryMethodOAuthExchangeSlack       AuthenticationFactorDeliveryMethod = "oauth_exchange_slack"
	AuthenticationFactorDeliveryMethodOAuthExchangeHubspot     AuthenticationFactorDeliveryMethod = "oauth_exchange_hubspot"
	AuthenticationFactorDeliveryMethodOAuthExchangeGithub      AuthenticationFactorDeliveryMethod = "oauth_exchange_github"
	AuthenticationFactorDeliveryMethodOAuthExchangeGoogle      AuthenticationFactorDeliveryMethod = "oauth_exchange_google"
	AuthenticationFactorDeliveryMethodImpersonation            AuthenticationFactorDeliveryMethod = "impersonation"
	AuthenticationFactorDeliveryMethodOAuthAccessTokenExchange AuthenticationFactorDeliveryMethod = "oauth_access_token_exchange"
	AuthenticationFactorDeliveryMethodTrustedTokenExchange     AuthenticationFactorDeliveryMethod = "trusted_token_exchange"
)

type AuthenticationFactorType string

const (
	AuthenticationFactorTypeMagicLink          AuthenticationFactorType = "magic_link"
	AuthenticationFactorTypeOTP                AuthenticationFactorType = "otp"
	AuthenticationFactorTypeOAuth              AuthenticationFactorType = "oauth"
	AuthenticationFactorTypeWebAuthn           AuthenticationFactorType = "webauthn"
	AuthenticationFactorTypeTOTP               AuthenticationFactorType = "totp"
	AuthenticationFactorTypeCrypto             AuthenticationFactorType = "crypto"
	AuthenticationFactorTypePassword           AuthenticationFactorType = "password"
	AuthenticationFactorTypeSignatureChallenge AuthenticationFactorType = "signature_challenge"
	AuthenticationFactorTypeSSO                AuthenticationFactorType = "sso"
	AuthenticationFactorTypeImported           AuthenticationFactorType = "imported"
	AuthenticationFactorTypeRecoveryCodes      AuthenticationFactorType = "recovery_codes"
	AuthenticationFactorTypeEmailOTP           AuthenticationFactorType = "email_otp"
	AuthenticationFactorTypeImpersonated       AuthenticationFactorType = "impersonated"
	AuthenticationFactorTypeTrustedAuthToken   AuthenticationFactorType = "trusted_auth_token"
)

// MANUAL(Types)(TYPES)
// ADDIMPORT: "errors"
// ADDIMPORT: "strings"
// ADDIMPORT: "github.com/golang-jwt/jwt/v5"

var ErrJWTTooOld = errors.New("JWT too old")

type SessionClaim struct {
	ID                    string                 `json:"id"`
	StartedAt             string                 `json:"started_at"`
	LastAccessedAt        string                 `json:"last_accessed_at"`
	ExpiresAt             string                 `json:"expires_at"`
	Attributes            attribute.Attributes   `json:"attributes"`
	AuthenticationFactors []AuthenticationFactor `json:"authentication_factors"`
	Roles                 []string               `json:"roles"`
}

type Claims struct {
	StytchSession SessionClaim `json:"https://stytch.com/session"`
	jwt.RegisteredClaims
}

type ClaimsWrapper struct {
	Claims map[string]any `json:"custom_claims"`
}

type SessionWrapper struct {
	Session ClaimsWrapper `json:"session"`
}

// ENDMANUAL(Types)
