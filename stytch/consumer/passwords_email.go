package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"

	"github.com/stytchauth/stytch-go/v10/stytch"
	"github.com/stytchauth/stytch-go/v10/stytch/consumer/passwords/email"
	"github.com/stytchauth/stytch-go/v10/stytch/stytcherror"
)

type PasswordsEmailClient struct {
	C stytch.Client
}

func NewPasswordsEmailClient(c stytch.Client) *PasswordsEmailClient {
	return &PasswordsEmailClient{
		C: c,
	}
}

// ResetStart: Initiates a password reset for the email address provided. This will trigger an email to be
// sent to the address, containing a magic link that will allow them to set a new password and authenticate.
func (c *PasswordsEmailClient) ResetStart(
	ctx context.Context,
	body *email.ResetStartParams,
) (*email.ResetStartResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal email.ResetStartResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/passwords/email/reset/start",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}

// Reset the user’s password and authenticate them. This endpoint checks that the magic link `token` is
// valid, hasn’t expired, or already been used – and can optionally require additional security settings,
// such as the IP address and user agent matching the initial reset request.
//
// The provided password needs to meet our password strength requirements, which can be checked in advance
// with the password strength endpoint. If the token and password are accepted, the password is securely
// stored for future authentication and the user is authenticated.
func (c *PasswordsEmailClient) Reset(
	ctx context.Context,
	body *email.ResetParams,
) (*email.ResetResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	var retVal email.ResetResponse
	err = c.C.NewRequest(
		ctx,
		"POST",
		"/v1/passwords/email/reset",
		nil,
		jsonBody,
		&retVal,
	)
	return &retVal, err
}
