package clients

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/connectedapps"
)

// CreateParams: Request type for `Clients.Create`.
type CreateParams struct {
	// ClientType: The type of Connected App. Supported values are `first_party`, `first_party_public`,
	// `third_party`, and `third_party_public`.
	ClientType CreateRequestClientType `json:"client_type,omitempty"`
	// RedirectURLS: Array of redirect URI values for use in OAuth Authorization flows.
	RedirectURLS []string `json:"redirect_url_s,omitempty"`
	// FullAccessAllowed: Valid for first party clients only. If `true`, an authorization token granted to this
	// Client can be exchanged for a full Stytch session.
	FullAccessAllowed bool `json:"full_access_allowed,omitempty"`
	// PostLogoutRedirectURLS: Array of redirect URI values for use in OIDC Logout flows.
	PostLogoutRedirectURLS []string `json:"post_logout_redirect_url_s,omitempty"`
	// ClientName: A human-readable name for the client.
	ClientName string `json:"client_name,omitempty"`
	// ClientDescription: A human-readable description for the client.
	ClientDescription string `json:"client_description,omitempty"`
	// AccessTokenExpiryMinutes: The number of minutes before the access token expires. The default is 60
	// minutes.
	AccessTokenExpiryMinutes int32 `json:"access_token_expiry_minutes,omitempty"`
	// AccessTokenCustomAudience: The custom audience for the access token.
	AccessTokenCustomAudience string `json:"access_token_custom_audience,omitempty"`
	// AccessTokenTemplateContent: The content of the access token custom claims template. The template must be
	// a valid JSON object.
	AccessTokenTemplateContent string `json:"access_token_template_content,omitempty"`
	// LogoURL: The logo URL of the Connected App, if any.
	LogoURL string `json:"logo_url,omitempty"`
	// BypassConsentForOfflineAccess: Valid for first party clients only. If true, the client does not need to
	// request explicit user consent for the `offline_access` scope.
	BypassConsentForOfflineAccess bool `json:"bypass_consent_for_offline_access,omitempty"`
}

// DeleteParams: Request type for `Clients.Delete`.
type DeleteParams struct {
	// ClientID: The ID of the client.
	ClientID string `json:"client_id,omitempty"`
}

// GetParams: Request type for `Clients.Get`.
type GetParams struct {
	// ClientID: The ID of the Connected App client.
	ClientID string `json:"client_id,omitempty"`
}

// SearchParams: Request type for `Clients.Search`.
type SearchParams struct {
	// Cursor: The `cursor` field allows you to paginate through your results. Each result array is limited to
	// 1000 results. If your query returns more than 1000 results, you will need to paginate the responses
	// using the `cursor`. If you receive a response that includes a non-null `next_cursor` in the
	// `results_metadata` object, repeat the search call with the `next_cursor` value set to the `cursor` field
	// to retrieve the next page of results. Continue to make search calls until the `next_cursor` in the
	// response is null.
	Cursor string `json:"cursor,omitempty"`
	// Limit: The number of search results to return per page. The default limit is 100. A maximum of 1000
	// results can be returned by a single search request. If the total size of your result set is greater than
	// one page size, you must paginate the response. See the `cursor` field.
	Limit uint32 `json:"limit,omitempty"`
}

// UpdateParams: Request type for `Clients.Update`.
type UpdateParams struct {
	// ClientID: The ID of the client.
	ClientID string `json:"client_id,omitempty"`
	// ClientName: A human-readable name for the client.
	ClientName string `json:"client_name,omitempty"`
	// ClientDescription: A human-readable description for the client.
	ClientDescription string `json:"client_description,omitempty"`
	// RedirectURLS: Array of redirect URI values for use in OAuth Authorization flows.
	RedirectURLS []string `json:"redirect_url_s,omitempty"`
	// FullAccessAllowed: Valid for first party clients only. If `true`, an authorization token granted to this
	// Client can be exchanged for a full Stytch session.
	FullAccessAllowed bool `json:"full_access_allowed,omitempty"`
	// AccessTokenExpiryMinutes: The number of minutes before the access token expires. The default is 60
	// minutes.
	AccessTokenExpiryMinutes int32 `json:"access_token_expiry_minutes,omitempty"`
	// AccessTokenCustomAudience: The custom audience for the access token.
	AccessTokenCustomAudience string `json:"access_token_custom_audience,omitempty"`
	// AccessTokenTemplateContent: The content of the access token custom claims template. The template must be
	// a valid JSON object.
	AccessTokenTemplateContent string `json:"access_token_template_content,omitempty"`
	// PostLogoutRedirectURLS: Array of redirect URI values for use in OIDC Logout flows.
	PostLogoutRedirectURLS []string `json:"post_logout_redirect_url_s,omitempty"`
	// LogoURL: The logo URL of the Connected App, if any.
	LogoURL string `json:"logo_url,omitempty"`
	// BypassConsentForOfflineAccess: Valid for first party clients only. If true, the client does not need to
	// request explicit user consent for the `offline_access` scope.
	BypassConsentForOfflineAccess bool `json:"bypass_consent_for_offline_access,omitempty"`
}

// CreateResponse: Response type for `Clients.Create`.
type CreateResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// ConnectedApp: The Connected App created by this API call.
	ConnectedApp connectedapps.ConnectedAppWithClientSecret `json:"connected_app,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

// DeleteResponse: Response type for `Clients.Delete`.
type DeleteResponse struct {
	RequestID string `json:"request_id,omitempty"`
	// ClientID: The ID of the client.
	ClientID   string `json:"client_id,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// GetResponse: Response type for `Clients.Get`.
type GetResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// ConnectedApp: The Connected App affected by this operation.
	ConnectedApp connectedapps.ConnectedApp `json:"connected_app,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

// SearchResponse: Response type for `Clients.Search`.
type SearchResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID     string                       `json:"request_id,omitempty"`
	ConnectedApps []connectedapps.ConnectedApp `json:"connected_apps,omitempty"`
	// ResultsMetadata: The search `results_metadata` object contains metadata relevant to your specific query
	// like total and `next_cursor`.
	ResultsMetadata connectedapps.ResultsMetadata `json:"results_metadata,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

// UpdateResponse: Response type for `Clients.Update`.
type UpdateResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// ConnectedApp: The Connected App affected by this operation.
	ConnectedApp connectedapps.ConnectedApp `json:"connected_app,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
}

type CreateRequestClientType string

const (
	CreateRequestClientTypeFirstParty       CreateRequestClientType = "first_party"
	CreateRequestClientTypeFirstPartyPublic CreateRequestClientType = "first_party_public"
	CreateRequestClientTypeThirdParty       CreateRequestClientType = "third_party"
	CreateRequestClientTypeThirdPartyPublic CreateRequestClientType = "third_party_public"
)
