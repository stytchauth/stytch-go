package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/connectedapps/clients"
	"github.com/stytchauth/stytch-go/v16/stytch/stytcherror"
)

type ConnectedAppClientsClient struct {
	C       stytch.Client
	Secrets *ConnectedAppClientsSecretsClient
}

func NewConnectedAppClientsClient(c stytch.Client) *ConnectedAppClientsClient {
	return &ConnectedAppClientsClient{
		C: c,

		Secrets: NewConnectedAppClientsSecretsClient(c),
	}
}

// Get: Retrieve details of a specific Connected App by `client_id`.
func (c *ConnectedAppClientsClient) Get(
	ctx context.Context,
	body *clients.GetParams,
) (*clients.GetResponse, error) {
	headers := make(map[string][]string)

	var retVal clients.GetResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        fmt.Sprintf("/v1/connected_apps/clients/%s", body.ClientID),
			QueryParams: nil,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Update: Updates mutable fields of a Connected App. Cannot update Client Type, Client ID, or Secrets.
func (c *ConnectedAppClientsClient) Update(
	ctx context.Context,
	body *clients.UpdateParams,
) (*clients.UpdateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal clients.UpdateResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "PUT",
			Path:        fmt.Sprintf("/v1/connected_apps/clients/%s", body.ClientID),
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Delete: Deletes a Connected App.
func (c *ConnectedAppClientsClient) Delete(
	ctx context.Context,
	body *clients.DeleteParams,
) (*clients.DeleteResponse, error) {
	headers := make(map[string][]string)

	var retVal clients.DeleteResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "DELETE",
			Path:        fmt.Sprintf("/v1/connected_apps/clients/%s", body.ClientID),
			QueryParams: nil,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Search for Connected Apps. Supports cursor-based pagination. Specific filters coming soon.
func (c *ConnectedAppClientsClient) Search(
	ctx context.Context,
	body *clients.SearchParams,
) (*clients.SearchResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal clients.SearchResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/connected_apps/clients/search",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Create: Creates a new Connected App. If the Connected App `client_type` is `first_party` or
// `third_party` a `client_secret` is returned.
//
// **Important:** This is the only time you will be able to view the generated `client_secret` in the API
// response. Stytch stores a hash of the `client_secret` and cannot recover the value if lost. Be sure to
// persist the `client_secret` in a secure location. If the `client_secret` is lost, you will need to
// trigger a secret rotation flow to receive another one.
func (c *ConnectedAppClientsClient) Create(
	ctx context.Context,
	body *clients.CreateParams,
) (*clients.CreateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal clients.CreateResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/connected_apps/clients",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}
