package oauth

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/connectedapps"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/idp"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/users"
)

// AuthorizeParams: Request type for `OAuth.Authorize`.
type AuthorizeParams struct {
	// ConsentGranted: Indicates whether the user granted the requested scopes.
	ConsentGranted bool `json:"consent_granted,omitempty"`
	// Scopes: An array of scopes requested by the client.
	Scopes []string `json:"scopes,omitempty"`
	// ClientID: The ID of the Connected App client.
	ClientID string `json:"client_id,omitempty"`
	// RedirectURI: The callback URI used to redirect the user after authentication. This is the same URI
	// provided at the start of the OAuth flow.  This field is required when using the `authorization_code`
	// grant.
	RedirectURI string `json:"redirect_uri,omitempty"`
	// ResponseType: The OAuth 2.0 response type. For authorization code flows this value is `code`.
	ResponseType string `json:"response_type,omitempty"`
	// UserID: The unique ID of a specific User. You may use an `external_id` here if one is set for the user.
	UserID string `json:"user_id,omitempty"`
	// SessionToken: The `session_token` associated with a User's existing Session.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: The `session_jwt` associated with a User's existing Session.
	SessionJWT string `json:"session_jwt,omitempty"`
	// Prompt: Space separated list that specifies how the Authorization Server should prompt the user for
	// reauthentication and consent. Only `consent` is supported today.
	Prompt string `json:"prompt,omitempty"`
	// State: An opaque value used to maintain state between the request and callback.
	State string `json:"state,omitempty"`
	// Nonce: A string used to associate a client session with an ID token to mitigate replay attacks.
	Nonce string `json:"nonce,omitempty"`
	// CodeChallenge: A base64url encoded challenge derived from the code verifier for PKCE flows.
	CodeChallenge string `json:"code_challenge,omitempty"`
}

// AuthorizeStartParams: Request type for `OAuth.AuthorizeStart`.
type AuthorizeStartParams struct {
	// ClientID: The ID of the Connected App client.
	ClientID string `json:"client_id,omitempty"`
	// RedirectURI: The callback URI used to redirect the user after authentication. This is the same URI
	// provided at the start of the OAuth flow.  This field is required when using the `authorization_code`
	// grant.
	RedirectURI string `json:"redirect_uri,omitempty"`
	// ResponseType: The OAuth 2.0 response type. For authorization code flows this value is `code`.
	ResponseType string `json:"response_type,omitempty"`
	// Scopes: An array of scopes requested by the client.
	Scopes []string `json:"scopes,omitempty"`
	// UserID: The unique ID of a specific User. You may use an `external_id` here if one is set for the user.
	UserID string `json:"user_id,omitempty"`
	// SessionToken: The `session_token` associated with a User's existing Session.
	SessionToken string `json:"session_token,omitempty"`
	// SessionJWT: The `session_jwt` associated with a User's existing Session.
	SessionJWT string `json:"session_jwt,omitempty"`
	// Prompt: Space separated list that specifies how the Authorization Server should prompt the user for
	// reauthentication and consent. Only `consent` is supported today.
	Prompt string `json:"prompt,omitempty"`
}

// AuthorizeResponse: Response type for `OAuth.Authorize`.
type AuthorizeResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// RedirectURI: The callback URI used to redirect the user after authentication. This is the same URI
	// provided at the start of the OAuth flow.  This field is required when using the `authorization_code`
	// grant.
	RedirectURI string `json:"redirect_uri,omitempty"`
	StatusCode  int32  `json:"status_code,omitempty"`
	// AuthorizationCode: A one-time use code that can be exchanged for tokens.
	AuthorizationCode string `json:"authorization_code,omitempty"`
}

// AuthorizeStartResponse: Response type for `OAuth.AuthorizeStart`.
type AuthorizeStartResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// UserID: The unique ID of the affected User.
	UserID string `json:"user_id,omitempty"`
	// User: The `user` object affected by this API call. See the
	// [Get user endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
	User   users.User                       `json:"user,omitempty"`
	Client connectedapps.ConnectedAppPublic `json:"client,omitempty"`
	// ConsentRequired: Whether the user must provide explicit consent for the authorization request.
	ConsentRequired bool `json:"consent_required,omitempty"`
	// ScopeResults: Details about each requested scope.
	ScopeResults []idp.ScopeResult `json:"scope_results,omitempty"`
	StatusCode   int32             `json:"status_code,omitempty"`
}
