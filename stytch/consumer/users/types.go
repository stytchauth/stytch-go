package users

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"time"

	"github.com/stytchauth/stytch-go/v8/stytch/consumer/attribute"
)

// BiometricRegistration: Fields:
//   - BiometricRegistrationID: The unique ID for a biometric registration.
//   - Verified: The verified boolean denotes whether or not this send method, e.g. phone number, email
//     address, etc., has been successfully authenticated by the User.
type BiometricRegistration struct {
	BiometricRegistrationID string `json:"biometric_registration_id,omitempty"`
	Verified                bool   `json:"verified,omitempty"`
}

// CreateParams: Request type for `Create`.
// Fields:
//   - Email: The email address of the end user.
//   - Name: The name of the user. Each field in the name object is optional.
//   - Attributes: Provided attributes help with fraud detection.
//   - PhoneNumber: The phone number to use for one-time passcodes. The phone number should be in E.164
//     format. The phone number should be in E.164 format (i.e. +1XXXXXXXXXX). You may use +10000000000 to test
//     this endpoint, see [Testing](https://stytch.com/docs/home#resources_testing) for more detail.
//   - CreateUserAsPending: Flag for whether or not to save a user as pending vs active in Stytch. Defaults
//     to false.
//     If true, users will be saved with status pending in Stytch's backend until authenticated.
//     If false, users will be created as active. An example usage of
//     a true flag would be to require users to verify their phone by entering the OTP code before
//     creating
//     an account for them.
//   - TrustedMetadata: The `trusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. See the [Metadata](https://stytch.com/docs/api/metadata) reference for
//     complete field behavior details.
//   - UntrustedMetadata: The `untrusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. Untrusted metadata can be edited by end users directly via the SDK, and
//     **cannot be used to store critical information.** See the
//     [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
type CreateParams struct {
	Email               string               `json:"email,omitempty"`
	Name                Name                 `json:"name,omitempty"`
	Attributes          attribute.Attributes `json:"attributes,omitempty"`
	PhoneNumber         string               `json:"phone_number,omitempty"`
	CreateUserAsPending bool                 `json:"create_user_as_pending,omitempty"`
	TrustedMetadata     map[string]any       `json:"trusted_metadata,omitempty"`
	UntrustedMetadata   map[string]any       `json:"untrusted_metadata,omitempty"`
}

// CryptoWallet: Fields:
//   - CryptoWalletID: The unique ID for a crypto wallet
//   - CryptoWalletAddress: The actual blockchain address of the User's crypto wallet.
//   - CryptoWalletType: The blockchain that the User's crypto wallet operates on, e.g. Ethereum, Solana,
//     etc.
//   - Verified: The verified boolean denotes whether or not this send method, e.g. phone number, email
//     address, etc., has been successfully authenticated by the User.
type CryptoWallet struct {
	CryptoWalletID      string `json:"crypto_wallet_id,omitempty"`
	CryptoWalletAddress string `json:"crypto_wallet_address,omitempty"`
	CryptoWalletType    string `json:"crypto_wallet_type,omitempty"`
	Verified            bool   `json:"verified,omitempty"`
}

// DeleteBiometricRegistrationParams: Request type for `DeleteBiometricRegistration`.
// Fields:
//   - BiometricRegistrationID: The `biometric_registration_id` to be deleted.
type DeleteBiometricRegistrationParams struct {
	BiometricRegistrationID string `json:"biometric_registration_id,omitempty"`
}

// DeleteCryptoWalletParams: Request type for `DeleteCryptoWallet`.
// Fields:
//   - CryptoWalletID: The `crypto_wallet_id` to be deleted.
type DeleteCryptoWalletParams struct {
	CryptoWalletID string `json:"crypto_wallet_id,omitempty"`
}

// DeleteEmailParams: Request type for `DeleteEmail`.
// Fields:
//   - EmailID: The `email_id` to be deleted.
type DeleteEmailParams struct {
	EmailID string `json:"email_id,omitempty"`
}

// DeleteOAuthRegistrationParams: Request type for `DeleteOAuthRegistration`.
// Fields:
//   - OauthUserRegistrationID: The `oauth_user_registration_id` to be deleted.
type DeleteOAuthRegistrationParams struct {
	OauthUserRegistrationID string `json:"oauth_user_registration_id,omitempty"`
}

// DeleteParams: Request type for `Delete`.
// Fields:
//   - UserID: The unique ID of a specific User.
type DeleteParams struct {
	UserID string `json:"user_id,omitempty"`
}

// DeletePasswordParams: Request type for `DeletePassword`.
// Fields:
//   - PasswordID: The `password_id` to be deleted.
type DeletePasswordParams struct {
	PasswordID string `json:"password_id,omitempty"`
}

// DeletePhoneNumberParams: Request type for `DeletePhoneNumber`.
// Fields:
//   - PhoneID: The `phone_id` to be deleted.
type DeletePhoneNumberParams struct {
	PhoneID string `json:"phone_id,omitempty"`
}

// DeleteTOTPParams: Request type for `DeleteTOTP`.
// Fields:
//   - TotpID: The `totp_id` to be deleted.
type DeleteTOTPParams struct {
	TotpID string `json:"totp_id,omitempty"`
}

// DeleteWebAuthnRegistrationParams: Request type for `DeleteWebAuthnRegistration`.
// Fields:
//   - WebauthnRegistrationID: The `webauthn_registration_id` to be deleted.
type DeleteWebAuthnRegistrationParams struct {
	WebauthnRegistrationID string `json:"webauthn_registration_id,omitempty"`
}

// Email: Fields:
//   - EmailID: The unique ID of a specific email address.
//   - Email: The email address.
//   - Verified: The verified boolean denotes whether or not this send method, e.g. phone number, email
//     address, etc., has been successfully authenticated by the User.
type Email struct {
	EmailID  string `json:"email_id,omitempty"`
	Email    string `json:"email,omitempty"`
	Verified bool   `json:"verified,omitempty"`
}

// GetParams: Request type for `Get`.
// Fields:
//   - UserID: The unique ID of a specific User.
type GetParams struct {
	UserID string `json:"user_id,omitempty"`
}

// Name: Fields:
//   - FirstName: The first name of the user.
//   - MiddleName: The middle name(s) of the user.
//   - LastName: The last name of the user.
type Name struct {
	FirstName  string `json:"first_name,omitempty"`
	MiddleName string `json:"middle_name,omitempty"`
	LastName   string `json:"last_name,omitempty"`
}

// OAuthProvider: Fields:
//   - ProviderType: Denotes the OAuth identity provider that the user has authenticated with, e.g. Google,
//     Facebook, GitHub etc.
//   - ProviderSubject: The unique identifier for the User within a given OAuth provider. Also commonly
//     called the "sub" or "Subject field" in OAuth protocols.
//   - ProfilePictureURL: If available, the `profile_picture_url` is a url of the User's profile picture
//     set in OAuth identity the provider that the User has authenticated with, e.g. Facebook profile picture.
//   - Locale: If available, the `locale` is the User's locale set in the OAuth identity provider that the
//     user has authenticated with.
//   - OauthUserRegistrationID: The unique ID for an OAuth registration.
type OAuthProvider struct {
	ProviderType            string `json:"provider_type,omitempty"`
	ProviderSubject         string `json:"provider_subject,omitempty"`
	ProfilePictureURL       string `json:"profile_picture_url,omitempty"`
	Locale                  string `json:"locale,omitempty"`
	OauthUserRegistrationID string `json:"oauth_user_registration_id,omitempty"`
}

// Password: Fields:
//   - PasswordID: The unique ID of a specific password
//   - RequiresReset: Indicates whether this password requires a password reset
type Password struct {
	PasswordID    string `json:"password_id,omitempty"`
	RequiresReset bool   `json:"requires_reset,omitempty"`
}

// PhoneNumber: Fields:
//   - PhoneID: The unique ID for the phone nunmber.
//   - PhoneNumber: The phone number.
//   - Verified: The verified boolean denotes whether or not this send method, e.g. phone number, email
//     address, etc., has been successfully authenticated by the User.
type PhoneNumber struct {
	PhoneID     string `json:"phone_id,omitempty"`
	PhoneNumber string `json:"phone_number,omitempty"`
	Verified    bool   `json:"verified,omitempty"`
}

// ResultsMetadata: Fields:
//   - Total: The total number of results returned by your search query.
//   - NextCursor: The `next_cursor` string is returned when your search result contains more than one page
//     of results. This value is passed into your next search call in the `cursor` field.
type ResultsMetadata struct {
	Total      int32  `json:"total,omitempty"`
	NextCursor string `json:"next_cursor,omitempty"`
}

// SearchParams: Request type for `Search`.
// Fields:
//   - Cursor: The `cursor` field allows you to paginate through your results. Each result array is limited
//     to 1000 results. If your query returns more than 1000 results, you will need to paginate the responses
//     using the `cursor`. If you receive a response that includes a non-null `next_cursor` in the
//     `results_metadata` object, repeat the search call with the `next_cursor` value set to the `cursor` field
//     to retrieve the next page of results. Continue to make search calls until the `next_cursor` in the
//     response is null.
//   - Limit: The number of search results to return per page. The default limit is 100. A maximum of 1000
//     results can be returned by a single search request. If the total size of your result set is greater than
//     one page size, you must paginate the response. See the `cursor` field.
//   - Query: The optional query object contains the operator, i.e. `AND` or `OR`, and the operands that
//     will filter your results. Only an operator is required. If you include no operands, no filtering will be
//     applied. If you include no query object, it will return all results with no filtering applied.
type SearchParams struct {
	Cursor string            `json:"cursor,omitempty"`
	Limit  uint32            `json:"limit,omitempty"`
	Query  *SearchUsersQuery `json:"query,omitempty"`
}

// SearchUsersQuery: Fields:
//
//   - Operator: The action to perform on the operands. The accepted value are:
//
//     `AND` – all the operand values provided must match.
//
//     `OR` – the operator will return any matches to at least one of the operand values you supply.
//
//   - Operands: An array of operand objects that contains all of the filters and values to apply to your
//     search search query.
type SearchUsersQuery struct {
	Operator string           `json:"operator,omitempty"`
	Operands []map[string]any `json:"operands,omitempty"`
}

// TOTP: Fields:
//   - TotpID: The unique ID for a TOTP instance.
//   - Verified: The verified boolean denotes whether or not this send method, e.g. phone number, email
//     address, etc., has been successfully authenticated by the User.
type TOTP struct {
	TotpID   string `json:"totp_id,omitempty"`
	Verified bool   `json:"verified,omitempty"`
}

// UpdateParams: Request type for `Update`.
// Fields:
//   - UserID: The unique ID of a specific User.
//   - Name: The name of the user. Each field in the name object is optional.
//   - Attributes: Provided attributes help with fraud detection.
//   - TrustedMetadata: The `trusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. See the [Metadata](https://stytch.com/docs/api/metadata) reference for
//     complete field behavior details.
//   - UntrustedMetadata: The `untrusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. Untrusted metadata can be edited by end users directly via the SDK, and
//     **cannot be used to store critical information.** See the
//     [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
type UpdateParams struct {
	UserID            string               `json:"user_id,omitempty"`
	Name              Name                 `json:"name,omitempty"`
	Attributes        attribute.Attributes `json:"attributes,omitempty"`
	TrustedMetadata   map[string]any       `json:"trusted_metadata,omitempty"`
	UntrustedMetadata map[string]any       `json:"untrusted_metadata,omitempty"`
}

// User: Fields:
//   - UserID: The unique ID of the affected User.
//   - Emails: An array of email objects for the User.
//   - Status: The status of the User. The possible values are `pending` and `active`.
//   - PhoneNumbers: An array of phone number objects linked to the User.
//   - WebauthnRegistrations: An array that contains a list of all WebAuthn registrations for a given User
//     in the Stytch API.
//   - Providers: An array of OAuth `provider` objects linked to the User.
//   - Totps: An array containing a list of all TOTP instances for a given User in the Stytch API.
//   - CryptoWallets: An array contains a list of all crypto wallets for a given User in the Stytch API.
//   - BiometricRegistrations: An array that contains a list of all biometric registrations for a given
//     User in the Stytch API.
//   - Name: The name of the User. Each field in the `name` object is optional.
//   - CreatedAt: The timestamp of the User's creation. Values conform to the RFC 3339 standard and are
//     expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
//   - Password: The password object is returned for users with a password.
//   - TrustedMetadata: The `trusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. See the [Metadata](https://stytch.com/docs/api/metadata) reference for
//     complete field behavior details.
//   - UntrustedMetadata: The `untrusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. Untrusted metadata can be edited by end users directly via the SDK, and
//     **cannot be used to store critical information.** See the
//     [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
type User struct {
	UserID                 string                  `json:"user_id,omitempty"`
	Emails                 []Email                 `json:"emails,omitempty"`
	Status                 string                  `json:"status,omitempty"`
	PhoneNumbers           []PhoneNumber           `json:"phone_numbers,omitempty"`
	WebauthnRegistrations  []WebAuthnRegistration  `json:"webauthn_registrations,omitempty"`
	Providers              []OAuthProvider         `json:"providers,omitempty"`
	Totps                  []TOTP                  `json:"totps,omitempty"`
	CryptoWallets          []CryptoWallet          `json:"crypto_wallets,omitempty"`
	BiometricRegistrations []BiometricRegistration `json:"biometric_registrations,omitempty"`
	Name                   Name                    `json:"name,omitempty"`
	CreatedAt              *time.Time              `json:"created_at,omitempty"`
	Password               Password                `json:"password,omitempty"`
	TrustedMetadata        map[string]any          `json:"trusted_metadata,omitempty"`
	UntrustedMetadata      map[string]any          `json:"untrusted_metadata,omitempty"`
}

// WebAuthnRegistration: Fields:
//   - WebauthnRegistrationID: The unique ID for the WebAuthn registration.
//   - Domain: The `domain` on which a WebAuthn registration was started. This will be the domain of your
//     app.
//   - UserAgent: The user agent of the User.
//   - Verified: The verified boolean denotes whether or not this send method, e.g. phone number, email
//     address, etc., has been successfully authenticated by the User.
//   - AuthenticatorType: The `authenticator_type` string displays the requested authenticator type of the
//     WebAuthn device. The two valid types are "platform" and "cross-platform". If no value is present, the
//     WebAuthn device was created without an authenticator type preference.
type WebAuthnRegistration struct {
	WebauthnRegistrationID string `json:"webauthn_registration_id,omitempty"`
	Domain                 string `json:"domain,omitempty"`
	UserAgent              string `json:"user_agent,omitempty"`
	Verified               bool   `json:"verified,omitempty"`
	AuthenticatorType      string `json:"authenticator_type,omitempty"`
}

// CreateResponse: Response type for `Create`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - EmailID: The unique ID of a specific email address.
//   - Status: The status of the User. The possible values are `pending` and `active`.
//   - PhoneID: The unique ID for the phone nunmber.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type CreateResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	EmailID    string `json:"email_id,omitempty"`
	Status     string `json:"status,omitempty"`
	PhoneID    string `json:"phone_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeleteBiometricRegistrationResponse: Response type for `DeleteBiometricRegistration`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteBiometricRegistrationResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeleteCryptoWalletResponse: Response type for `DeleteCryptoWallet`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteCryptoWalletResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeleteEmailResponse: Response type for `DeleteEmail`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteEmailResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeleteOAuthRegistrationResponse: Response type for `DeleteOAuthRegistration`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteOAuthRegistrationResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeletePasswordResponse: Response type for `DeletePassword`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeletePasswordResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeletePhoneNumberResponse: Response type for `DeletePhoneNumber`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeletePhoneNumberResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeleteResponse: Response type for `Delete`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the deleted User.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeleteTOTPResponse: Response type for `DeleteTOTP`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteTOTPResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// DeleteWebAuthnRegistrationResponse: Response type for `DeleteWebAuthnRegistration`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type DeleteWebAuthnRegistrationResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	User       User   `json:"user,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}

// GetResponse: Response type for `Get`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the returned User.
//   - Emails: An array of email objects for the User.
//   - Status: The status of the User. The possible values are `pending` and `active`.
//   - PhoneNumbers: An array of phone number objects linked to the User.
//   - WebauthnRegistrations: An array that contains a list of all WebAuthn registrations for a given User
//     in the Stytch API.
//   - Providers: An array of OAuth `provider` objects linked to the User.
//   - Totps: An array containing a list of all TOTP instances for a given User in the Stytch API.
//   - CryptoWallets: An array contains a list of all crypto wallets for a given User in the Stytch API.
//   - BiometricRegistrations: An array that contains a list of all biometric registrations for a given
//     User in the Stytch API.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//   - Name: The name of the User. Each field in the `name` object is optional.
//   - CreatedAt: The timestamp of the User's creation. Values conform to the RFC 3339 standard and are
//     expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
//   - Password: The password object is returned for users with a password.
//   - TrustedMetadata: The `trusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. See the [Metadata](https://stytch.com/docs/api/metadata) reference for
//     complete field behavior details.
//   - UntrustedMetadata: The `untrusted_metadata` field contains an arbitrary JSON object of
//     application-specific data. Untrusted metadata can be edited by end users directly via the SDK, and
//     **cannot be used to store critical information.** See the
//     [Metadata](https://stytch.com/docs/api/metadata) reference for complete field behavior details.
type GetResponse struct {
	RequestID              string                  `json:"request_id,omitempty"`
	UserID                 string                  `json:"user_id,omitempty"`
	Emails                 []Email                 `json:"emails,omitempty"`
	Status                 string                  `json:"status,omitempty"`
	PhoneNumbers           []PhoneNumber           `json:"phone_numbers,omitempty"`
	WebauthnRegistrations  []WebAuthnRegistration  `json:"webauthn_registrations,omitempty"`
	Providers              []OAuthProvider         `json:"providers,omitempty"`
	Totps                  []TOTP                  `json:"totps,omitempty"`
	CryptoWallets          []CryptoWallet          `json:"crypto_wallets,omitempty"`
	BiometricRegistrations []BiometricRegistration `json:"biometric_registrations,omitempty"`
	StatusCode             int32                   `json:"status_code,omitempty"`
	Name                   Name                    `json:"name,omitempty"`
	CreatedAt              *time.Time              `json:"created_at,omitempty"`
	Password               Password                `json:"password,omitempty"`
	TrustedMetadata        map[string]any          `json:"trusted_metadata,omitempty"`
	UntrustedMetadata      map[string]any          `json:"untrusted_metadata,omitempty"`
}

// SearchResponse: Response type for `Search`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - Results: An array of results that match your search query.
//   - ResultsMetadata: The search `results_metadata` object contains metadata relevant to your specific
//     query like total and `next_cursor`.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type SearchResponse struct {
	RequestID       string          `json:"request_id,omitempty"`
	Results         []User          `json:"results,omitempty"`
	ResultsMetadata ResultsMetadata `json:"results_metadata,omitempty"`
	StatusCode      int32           `json:"status_code,omitempty"`
}

// UpdateResponse: Response type for `Update`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the updated User.
//   - Emails: An array of email objects for the User.
//   - PhoneNumbers: An array of phone number objects linked to the User.
//   - CryptoWallets: An array contains a list of all crypto wallets for a given User in the Stytch API.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type UpdateResponse struct {
	RequestID     string         `json:"request_id,omitempty"`
	UserID        string         `json:"user_id,omitempty"`
	Emails        []Email        `json:"emails,omitempty"`
	PhoneNumbers  []PhoneNumber  `json:"phone_numbers,omitempty"`
	CryptoWallets []CryptoWallet `json:"crypto_wallets,omitempty"`
	User          User           `json:"user,omitempty"`
	StatusCode    int32          `json:"status_code,omitempty"`
}
