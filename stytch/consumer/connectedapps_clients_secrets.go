package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/connectedapps/clients/secrets"
	"github.com/stytchauth/stytch-go/v16/stytch/stytcherror"
)

type ConnectedAppClientsSecretsClient struct {
	C stytch.Client
}

func NewConnectedAppClientsSecretsClient(c stytch.Client) *ConnectedAppClientsSecretsClient {
	return &ConnectedAppClientsSecretsClient{
		C: c,
	}
}

func (c *ConnectedAppClientsSecretsClient) RotateStart(
	ctx context.Context,
	body *secrets.RotateStartParams,
) (*secrets.RotateStartResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal secrets.RotateStartResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        fmt.Sprintf("/v1/connected_apps/clients/%s/secrets/rotate/start", body.ClientID),
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

func (c *ConnectedAppClientsSecretsClient) RotateCancel(
	ctx context.Context,
	body *secrets.RotateCancelParams,
) (*secrets.RotateCancelResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal secrets.RotateCancelResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        fmt.Sprintf("/v1/connected_apps/clients/%s/secrets/rotate/cancel", body.ClientID),
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

func (c *ConnectedAppClientsSecretsClient) Rotate(
	ctx context.Context,
	body *secrets.RotateParams,
) (*secrets.RotateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal secrets.RotateResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        fmt.Sprintf("/v1/connected_apps/clients/%s/secrets/rotate", body.ClientID),
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}
