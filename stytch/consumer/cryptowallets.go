package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/mitchellh/mapstructure"
	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/cryptowallets"
	"github.com/stytchauth/stytch-go/v16/stytch/stytcherror"
)

type CryptoWalletsClient struct {
	C stytch.Client
}

func NewCryptoWalletsClient(c stytch.Client) *CryptoWalletsClient {
	return &CryptoWalletsClient{
		C: c,
	}
}

// AuthenticateStart: Initiate the authentication of a crypto wallet. After calling this endpoint, the user
// will need to sign a message containing the returned `challenge` field.
//
// For Ethereum crypto wallets, you can optionally use the Sign In With Ethereum (SIWE) protocol for the
// message by passing in the `siwe_params`. The only required fields are `domain` and `uri`.
// If the crypto wallet detects that the domain in the message does not match the website's domain, it will
// display a warning to the user.
//
// If not using the SIWE protocol, the message will simply consist of the project name and a random string.
func (c *CryptoWalletsClient) AuthenticateStart(
	ctx context.Context,
	body *cryptowallets.AuthenticateStartParams,
) (*cryptowallets.AuthenticateStartResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal cryptowallets.AuthenticateStartResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/crypto_wallets/authenticate/start",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// Authenticate: Complete the authentication of a crypto wallet by passing the signature.
func (c *CryptoWalletsClient) Authenticate(
	ctx context.Context,
	body *cryptowallets.AuthenticateParams,
) (*cryptowallets.AuthenticateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	var retVal cryptowallets.AuthenticateResponse
	err = c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/crypto_wallets/authenticate",
			QueryParams: nil,
			Body:        jsonBody,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// AuthenticateWithClaims fills in the claims pointer with custom claims from the response.
// Pass in a map with the types of values you're expecting so that this function can marshal
// the claims from the response. See ExampleClient_AuthenticateWithClaims_map,
// ExampleClient_AuthenticateWithClaims_struct for examples
func (c *CryptoWalletsClient) AuthenticateWithClaims(
	ctx context.Context,
	body *cryptowallets.AuthenticateParams,
	claims any,
) (*cryptowallets.AuthenticateResponse, error) {
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("error marshaling request body")
		}
	}

	headers := make(map[string][]string)

	b, err := c.C.RawRequest(
		ctx,
		stytch.RequestParams{
			Method:      "POST",
			Path:        "/v1/crypto_wallets/authenticate",
			QueryParams: nil,
			Body:        jsonBody,
			Headers:     headers,
		},
	)
	if err != nil {
		return nil, err
	}

	// First extract the Stytch data.
	var retVal cryptowallets.AuthenticateResponse
	if err := json.Unmarshal(b, &retVal); err != nil {
		return nil, fmt.Errorf("unmarshal cryptowallets.AuthenticateResponse: %w", err)
	}

	if claims == nil {
		return &retVal, nil
	}

	if m, ok := claims.(*map[string]any); ok {
		*m = retVal.Session.CustomClaims
		return &retVal, nil
	}

	// This is where we need to convert claims into a claimsMap
	decoder, err := mapstructure.NewDecoder(&mapstructure.DecoderConfig{
		Result:  &claims,
		TagName: "json",
	})
	if err != nil {
		return nil, err
	}

	err = decoder.Decode(retVal.Session.CustomClaims)
	if err != nil {
		return nil, err
	}

	return &retVal, err
}
