package totps

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"github.com/stytchauth/stytch-go/v8/stytch/consumer/sessions"
	"github.com/stytchauth/stytch-go/v8/stytch/consumer/users"
)

// AuthenticateParams: Request type for `TOTPs.Authenticate`.
// Fields:
//
//   - UserID: The `user_id` of an active user the TOTP registration should be tied to.
//
//   - TotpCode: The TOTP code to authenticate. The TOTP code should consist of 6 digits.
//
//   - SessionToken: The `session_token` associated with a User's existing Session.
//
//   - SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a
//     new session if one doesn't already exist,
//     returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
//     `session_jwt` will have a fixed lifetime of
//     five minutes regardless of the underlying session duration, and will need to be refreshed over time.
//
//     This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
//
//     If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
//     extend the session this many minutes.
//
//     If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
//
//   - SessionJWT: The `session_jwt` associated with a User's existing Session.
//
//   - SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only
//     created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be
//     included on the Session object and in the JWT. To update a key in an existing Session, supply a new
//     value. To delete a key, supply a null value.
//
//     Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
//     ignored. Total custom claims size cannot exceed four kilobytes.
type AuthenticateParams struct {
	UserID                 string         `json:"user_id,omitempty"`
	TotpCode               string         `json:"totp_code,omitempty"`
	SessionToken           string         `json:"session_token,omitempty"`
	SessionDurationMinutes int32          `json:"session_duration_minutes,omitempty"`
	SessionJWT             string         `json:"session_jwt,omitempty"`
	SessionCustomClaims    map[string]any `json:"session_custom_claims,omitempty"`
}

// CreateParams: Request type for `TOTPs.Create`.
// Fields:
//   - UserID: The `user_id` of an active user the TOTP registration should be tied to.
//   - ExpirationMinutes: The expiration for the TOTP instance. If the newly created TOTP is not
//     authenticated within this time frame the TOTP will be unusable. Defaults to 60 (1 hour) with a minimum
//     of 5 and a maximum of 1440.
type CreateParams struct {
	UserID            string `json:"user_id,omitempty"`
	ExpirationMinutes int32  `json:"expiration_minutes,omitempty"`
}

// RecoverParams: Request type for `TOTPs.Recover`.
// Fields:
//
//   - UserID: The `user_id` of an active user the TOTP registration should be tied to.
//
//   - RecoveryCode: The recovery code to authenticate.
//
//   - SessionToken: The `session_token` associated with a User's existing Session.
//
//   - SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a
//     new session if one doesn't already exist,
//     returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
//     `session_jwt` will have a fixed lifetime of
//     five minutes regardless of the underlying session duration, and will need to be refreshed over time.
//
//     This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
//
//     If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
//     extend the session this many minutes.
//
//     If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
//
//   - SessionJWT: The `session_jwt` associated with a User's existing Session.
//
//   - SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only
//     created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be
//     included on the Session object and in the JWT. To update a key in an existing Session, supply a new
//     value. To delete a key, supply a null value.
//
//     Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
//     ignored. Total custom claims size cannot exceed four kilobytes.
type RecoverParams struct {
	UserID                 string         `json:"user_id,omitempty"`
	RecoveryCode           string         `json:"recovery_code,omitempty"`
	SessionToken           string         `json:"session_token,omitempty"`
	SessionDurationMinutes int32          `json:"session_duration_minutes,omitempty"`
	SessionJWT             string         `json:"session_jwt,omitempty"`
	SessionCustomClaims    map[string]any `json:"session_custom_claims,omitempty"`
}

// RecoveryCodesParams: Request type for `TOTPs.RecoveryCodes`.
// Fields:
//   - UserID: The `user_id` of an active user the TOTP registration should be tied to.
type RecoveryCodesParams struct {
	UserID string `json:"user_id,omitempty"`
}

// TOTP: Fields:
//   - TotpID: The unique ID for a TOTP instance.
//   - Verified: The verified boolean denotes whether or not this send method, e.g. phone number, email
//     address, etc., has been successfully authenticated by the User.
//   - RecoveryCodes: The recovery codes used to authenticate the user without an authenticator app.
type TOTP struct {
	TotpID        string   `json:"totp_id,omitempty"`
	Verified      bool     `json:"verified,omitempty"`
	RecoveryCodes []string `json:"recovery_codes,omitempty"`
}

// AuthenticateResponse: Response type for `TOTPs.Authenticate`.
// Fields:
//
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//
//   - UserID: The unique ID of the affected User.
//
//   - SessionToken: A secret token for a given Stytch Session.
//
//   - TotpID: The unique ID for a TOTP instance.
//
//   - SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
//
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//
//   - Session: If you initiate a Session, by including `session_duration_minutes` in your authenticate
//     call, you'll receive a full Session object in the response.
//
//     See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
type AuthenticateResponse struct {
	RequestID    string           `json:"request_id,omitempty"`
	UserID       string           `json:"user_id,omitempty"`
	SessionToken string           `json:"session_token,omitempty"`
	TotpID       string           `json:"totp_id,omitempty"`
	SessionJWT   string           `json:"session_jwt,omitempty"`
	User         users.User       `json:"user,omitempty"`
	StatusCode   int32            `json:"status_code,omitempty"`
	Session      sessions.Session `json:"session,omitempty"`
}

// CreateResponse: Response type for `TOTPs.Create`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - TotpID: The unique ID for a TOTP instance.
//   - Secret: The TOTP secret key shared between the authenticator app and the server used to generate
//     TOTP codes.
//   - QrCode: The QR code image encoded in base64.
//   - RecoveryCodes: The recovery codes used to authenticate the user without an authenticator app.
//   - UserID: The unique ID of the affected User.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
type CreateResponse struct {
	RequestID     string     `json:"request_id,omitempty"`
	TotpID        string     `json:"totp_id,omitempty"`
	Secret        string     `json:"secret,omitempty"`
	QrCode        string     `json:"qr_code,omitempty"`
	RecoveryCodes []string   `json:"recovery_codes,omitempty"`
	UserID        string     `json:"user_id,omitempty"`
	StatusCode    int32      `json:"status_code,omitempty"`
	User          users.User `json:"user,omitempty"`
}

// RecoverResponse: Response type for `TOTPs.Recover`.
// Fields:
//
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//
//   - TotpID: The unique ID for a TOTP instance.
//
//   - UserID: The unique ID of the affected User.
//
//   - SessionToken: A secret token for a given Stytch Session.
//
//   - SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
//
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://stytch.com/docs/api/get-user) for complete response field details.
//
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//
//   - Session: If you initiate a Session, by including `session_duration_minutes` in your authenticate
//     call, you'll receive a full Session object in the response.
//
//     See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
type RecoverResponse struct {
	RequestID    string           `json:"request_id,omitempty"`
	TotpID       string           `json:"totp_id,omitempty"`
	UserID       string           `json:"user_id,omitempty"`
	SessionToken string           `json:"session_token,omitempty"`
	SessionJWT   string           `json:"session_jwt,omitempty"`
	User         users.User       `json:"user,omitempty"`
	StatusCode   int32            `json:"status_code,omitempty"`
	Session      sessions.Session `json:"session,omitempty"`
}

// RecoveryCodesResponse: Response type for `TOTPs.RecoveryCodes`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - Totps: An array containing a list of all TOTP instances (along with their recovery codes) for a
//     given User in the Stytch API.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type RecoveryCodesResponse struct {
	RequestID  string `json:"request_id,omitempty"`
	UserID     string `json:"user_id,omitempty"`
	Totps      []TOTP `json:"totps,omitempty"`
	StatusCode int32  `json:"status_code,omitempty"`
}
