package m2m

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

// M2MClient:
type M2MClient struct {
	// ClientID: The ID of the client.
	ClientID string `json:"client_id,omitempty"`
	// ClientName: A human-readable name for the client.
	ClientName string `json:"client_name,omitempty"`
	// ClientDescription: A human-readable description for the client.
	ClientDescription string `json:"client_description,omitempty"`
	// Status: The status of the client - either `active` or `inactive`.
	Status string `json:"status,omitempty"`
	// Scopes: An array of scopes assigned to the client.
	Scopes []string `json:"scopes,omitempty"`
	// TrustedMetadata: An arbitrary JSON object for storing application-specific data.
	TrustedMetadata map[string]any `json:"trusted_metadata,omitempty"`
}

// M2MClientWithClientSecret:
type M2MClientWithClientSecret struct {
	// ClientID: The ID of the client.
	ClientID string `json:"client_id,omitempty"`
	// ClientSecret: The secret of the client. **Important:** this is the only time you will be able to view
	// the `client_secret`. Be sure to persist the `client_secret` in a secure location. If the `client_secret`
	// is lost, you will need to trigger a secret rotation flow to receive another one.
	ClientSecret string `json:"client_secret,omitempty"`
	// ClientName: A human-readable name for the client.
	ClientName string `json:"client_name,omitempty"`
	// ClientDescription: A human-readable description for the client.
	ClientDescription string `json:"client_description,omitempty"`
	// Status: The status of the client - either `active` or `inactive`.
	Status string `json:"status,omitempty"`
	// Scopes: An array of scopes assigned to the client.
	Scopes []string `json:"scopes,omitempty"`
	// TrustedMetadata: An arbitrary JSON object for storing application-specific data.
	TrustedMetadata map[string]any `json:"trusted_metadata,omitempty"`
}

// M2MClientWithNextClientSecret:
type M2MClientWithNextClientSecret struct {
	// ClientID: The ID of the client.
	ClientID string `json:"client_id,omitempty"`
	// NextClientSecret: The newly created secret that's next in rotation for the client. **Important:** this
	// is the only time you will be able to view the `next_client_secret`. Be sure to persist the
	// `next_client_secret` in a secure location. If the `next_client_secret` is lost, you will need to trigger
	// a secret rotation flow to receive another one.
	NextClientSecret string `json:"next_client_secret,omitempty"`
	// ClientName: A human-readable name for the client.
	ClientName string `json:"client_name,omitempty"`
	// ClientDescription: A human-readable description for the client.
	ClientDescription string `json:"client_description,omitempty"`
	// Status: The status of the client - either `active` or `inactive`.
	Status string `json:"status,omitempty"`
	// Scopes: An array of scopes assigned to the client.
	Scopes []string `json:"scopes,omitempty"`
	// TrustedMetadata: An arbitrary JSON object for storing application-specific data.
	TrustedMetadata map[string]any `json:"trusted_metadata,omitempty"`
}

// M2MSearchQuery:
type M2MSearchQuery struct {
	// Operator: The action to perform on the operands. The accepted value are:
	//
	//   `AND` – all the operand values provided must match.
	//
	//   `OR` – the operator will return any matches to at least one of the operand values you supply.
	Operator M2MSearchQueryOperator `json:"operator,omitempty"`
	// Operands: An array of operand objects that contains all of the filters and values to apply to your
	// search search query.
	Operands []map[string]any `json:"operands,omitempty"`
}

// ResultsMetadata:
type ResultsMetadata struct {
	// Total: The total number of results returned by your search query.
	Total int32 `json:"total,omitempty"`
	// NextCursor: The `next_cursor` string is returned when your search result contains more than one page of
	// results. This value is passed into your next search call in the `cursor` field.
	NextCursor string `json:"next_cursor,omitempty"`
}

type M2MSearchQueryOperator string

const (
	M2MSearchQueryOperatorOR  M2MSearchQueryOperator = "OR"
	M2MSearchQueryOperatorAND M2MSearchQueryOperator = "AND"
)
