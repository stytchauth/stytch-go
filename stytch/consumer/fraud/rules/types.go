package rules

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"time"

	"github.com/stytchauth/stytch-go/v16/stytch/consumer/fraud"
)

// SetParams: Request type for `Rules.Set`.
type SetParams struct {
	// Action: The action that should be returned by a fingerprint lookup for that identifier with a
	// `RULE_MATCH` reason. The following values are valid: `ALLOW`, `BLOCK`, `CHALLENGE`, or `NONE`. For
	// country codes, `ALLOW` actions are not allowed. If a `NONE` action is specified, it will clear the
	// stored rule.
	Action fraud.RuleAction `json:"action,omitempty"`
	// VisitorID: The visitor ID we want to set a rule for. Only one identifier can be specified in the request.
	VisitorID string `json:"visitor_id,omitempty"`
	// BrowserID: The browser ID we want to set a rule for. Only one identifier can be specified in the request.
	BrowserID string `json:"browser_id,omitempty"`
	// VisitorFingerprint: The visitor fingerprint we want to set a rule for. Only one identifier can be
	// specified in the request.
	VisitorFingerprint string `json:"visitor_fingerprint,omitempty"`
	// BrowserFingerprint: The browser fingerprint we want to set a rule for. Only one identifier can be
	// specified in the request.
	BrowserFingerprint string `json:"browser_fingerprint,omitempty"`
	// HardwareFingerprint: The hardware fingerprint we want to set a rule for. Only one identifier can be
	// specified in the request.
	HardwareFingerprint string `json:"hardware_fingerprint,omitempty"`
	// NetworkFingerprint: The network fingerprint we want to set a rule for. Only one identifier can be
	// specified in the request.
	NetworkFingerprint string `json:"network_fingerprint,omitempty"`
	// ExpiresInMinutes: The number of minutes until this rule expires. If no `expires_in_minutes` is
	// specified, then the rule is kept permanently.
	ExpiresInMinutes int32 `json:"expires_in_minutes,omitempty"`
	// Description: An optional description for the rule.
	Description string `json:"description,omitempty"`
	// CidrBlock: The CIDR block we want to set a rule for. You may pass either an IP address or a CIDR block.
	// The CIDR block prefix must be between 16 and 32, inclusive. If an end user's IP address is within this
	// CIDR block, this rule will be applied. Only one identifier can be specified in the request.
	CidrBlock string `json:"cidr_block,omitempty"`
	// CountryCode: The country code we want to set a rule for. The country code must be a valid ISO 3166-1
	// alpha-2 code. You may not set `ALLOW` rules for country codes. Only one identifier can be specified in
	// the request.
	CountryCode string `json:"country_code,omitempty"`
	// Asn: The ASN we want to set a rule for. The ASN must be the string representation of an integer between
	// 0 and 4294967295, inclusive. Only one identifier can be specified in the request.
	Asn string `json:"asn,omitempty"`
}

// SetResponse: Response type for `Rules.Set`.
type SetResponse struct {
	// RequestID: Globally unique UUID that is returned with every API call. This value is important to log for
	// debugging purposes; we may ask for this value to help identify a specific API call when helping you
	// debug an issue.
	RequestID string `json:"request_id,omitempty"`
	// Action: The action that will be returned for the specified fingerprint or ID.
	Action fraud.RuleAction `json:"action,omitempty"`
	// StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
	// patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
	// are server errors.
	StatusCode int32 `json:"status_code,omitempty"`
	// VisitorID: The visitor ID that a rule was set for.
	VisitorID string `json:"visitor_id,omitempty"`
	// BrowserID: The browser ID that a rule was set for.
	BrowserID string `json:"browser_id,omitempty"`
	// VisitorFingerprint: The visitor fingerprint that a rule was set for.
	VisitorFingerprint string `json:"visitor_fingerprint,omitempty"`
	// BrowserFingerprint: The browser fingerprint that a rule was set for.
	BrowserFingerprint string `json:"browser_fingerprint,omitempty"`
	// HardwareFingerprint: The hardware fingerprint that a rule was set for.
	HardwareFingerprint string `json:"hardware_fingerprint,omitempty"`
	// NetworkFingerprint: The network fingerprint that a rule was set for.
	NetworkFingerprint string `json:"network_fingerprint,omitempty"`
	// ExpiresAt: The timestamp when the rule expires. Values conform to the RFC 3339 standard and are
	// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// CidrBlock: The CIDR block that a rule was set for. If an end user's IP address is within this CIDR
	// block, this rule will be applied.
	CidrBlock string `json:"cidr_block,omitempty"`
	// CountryCode: The country code that a rule was set for.
	CountryCode string `json:"country_code,omitempty"`
	// Asn: The ASN that a rule was set for.
	Asn string `json:"asn,omitempty"`
}
