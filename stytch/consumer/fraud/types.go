package fraud

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"time"
)

// ASNProperties:
type ASNProperties struct {
	// Asn: The Autonomous System Number of the user's network.
	Asn string `json:"asn,omitempty"`
	// Name: Public name associated with the ASN.
	Name string `json:"name,omitempty"`
	// Network: The CIDR block associated with the ASN.
	Network string `json:"network,omitempty"`
}

// BrowserProperties:
type BrowserProperties struct {
	// UserAgent: The user agent of the user's browser.
	UserAgent string `json:"user_agent,omitempty"`
}

// Fingerprints:
type Fingerprints struct {
	// NetworkFingerprint: Combination of signals associated with a specific network commonly known as TLS
	// fingerprinting.
	NetworkFingerprint string `json:"network_fingerprint,omitempty"`
	// HardwareFingerprint: Combinations of signals to identify an operating system and architecture.
	HardwareFingerprint string `json:"hardware_fingerprint,omitempty"`
	// BrowserFingerprint: Combination of signals to identify a browser and its specific version.
	BrowserFingerprint string `json:"browser_fingerprint,omitempty"`
	// VisitorFingerprint: Cookie-less way of identifying a unique user.
	VisitorFingerprint string `json:"visitor_fingerprint,omitempty"`
	// VisitorID: The cookie stored on the user's device that uniquely identifies them.
	VisitorID string `json:"visitor_id,omitempty"`
	// BrowserID: Combination of VisitorID and NetworkFingerprint to create a clear identifier of a browser.
	BrowserID string `json:"browser_id,omitempty"`
}

// IPGeoProperties:
type IPGeoProperties struct {
	// City: The city where the IP is located.
	City string `json:"city,omitempty"`
	// Region: The region where the IP is located.
	Region string `json:"region,omitempty"`
	// Country: The country where the IP is located.
	Country string `json:"country,omitempty"`
}

// Metadata:
type Metadata struct {
	// ExternalID: An external ID, such as a user ID, that you wish to associate with the telemetry ID.
	ExternalID string `json:"external_id,omitempty"`
	// OrganizationID: The organization ID you wish to associate with the telemetry ID.
	OrganizationID string `json:"organization_id,omitempty"`
	// UserAction: The user action, such as 'login', that you wish to associate with the telemetry ID.
	UserAction string `json:"user_action,omitempty"`
}

// NetworkProperties:
type NetworkProperties struct {
	// IPAddress: The IP address of the client.
	IPAddress string `json:"ip_address,omitempty"`
	// Asn: Information about the network's ASN (Autonomous System Number).
	Asn ASNProperties `json:"asn,omitempty"`
	// IPGeolocation: Information about the geolocation of the user's IP address.
	IPGeolocation IPGeoProperties `json:"ip_geolocation,omitempty"`
	// IsProxy: Whether the user is using a proxy.
	IsProxy bool `json:"is_proxy,omitempty"`
	// IsVpn: Whether the user is using a VPN.
	IsVpn bool `json:"is_vpn,omitempty"`
}

// Properties:
type Properties struct {
	NetworkProperties NetworkProperties `json:"network_properties,omitempty"`
	BrowserProperties BrowserProperties `json:"browser_properties,omitempty"`
}

// Rule:
type Rule struct {
	// RuleType: The rule type. The possible values are `VISITOR_ID`, `BROWSER_ID`, `VISITOR_FINGERPRINT`,
	// `BROWSER_FINGERPRINT`, `HARDWARE_FINGERPRINT`, `NETWORK_FINGERPRINT`, `CIDR_BLOCK`, `ASN`, or
	// `COUNTRY_CODE`.
	RuleType RuleType `json:"rule_type,omitempty"`
	// Action: The action (`ALLOW`, `BLOCK`, or `CHALLENGE`) that will be returned for this rule.
	Action RuleAction `json:"action,omitempty"`
	// CreatedAt: The time when the rule was created. Values conform to the RFC 3339 standard and are expressed
	// in UTC, e.g. `2021-12-29T12:33:09Z`.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// VisitorID: The visitor ID that a rule was set for.
	VisitorID string `json:"visitor_id,omitempty"`
	// BrowserID: The browser ID that a rule was set for.
	BrowserID string `json:"browser_id,omitempty"`
	// VisitorFingerprint: The visitor fingerprint that a rule was set for.
	VisitorFingerprint string `json:"visitor_fingerprint,omitempty"`
	// BrowserFingerprint: The browser fingerprint that a rule was set for.
	BrowserFingerprint string `json:"browser_fingerprint,omitempty"`
	// HardwareFingerprint: The hardware fingerprint that a rule was set for.
	HardwareFingerprint string `json:"hardware_fingerprint,omitempty"`
	// NetworkFingerprint: The network fingerprint that a rule was set for.
	NetworkFingerprint string `json:"network_fingerprint,omitempty"`
	// CidrBlock: The CIDR block that a rule was set for. If an end user's IP address is within this CIDR
	// block, this rule will be applied.
	CidrBlock string `json:"cidr_block,omitempty"`
	// CountryCode: The country code that a rule was set for.
	CountryCode string `json:"country_code,omitempty"`
	// Asn: The ASN that a rule was set for.
	Asn string `json:"asn,omitempty"`
	// Description: A description for the rule.
	Description string `json:"description,omitempty"`
	// ExpiresAt: The timestamp when the rule expires. Values conform to the RFC 3339 standard and are
	// expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// LastUpdatedAt: The time when the rule was last updated. Will be null if the rule has never been updated.
	// Values conform to the RFC 3339 standard and are expressed in UTC, e.g. `2021-12-29T12:33:09Z`.
	LastUpdatedAt *time.Time `json:"last_updated_at,omitempty"`
}

// Verdict:
type Verdict struct {
	// Action: The suggested action based on the fingerprint review. The available actions are:
	//   * `ALLOW` - This is a known valid device grouping or device profile that is part of the default ALLOW
	// listed set of known devices by Stytch. This grouping is made up of verified device profiles that match
	// the characteristics of known/authentic traffic origins
	//   * `BLOCK` - This is a known bad or malicious device profile that is undesirable and should be blocked
	// from completing the privileged action in question
	//   * `CHALLENGE` - This is an unknown or potentially malicious device that should be put through
	// increased friction such as 2FA or other forms of extended user verification before allowing the
	// privileged action to proceed
	//
	Action VerdictAction `json:"action,omitempty"`
	// Reasons: A set of contextual clues to inform why a `CHALLENGE` or `BLOCK` action was suggested. For a
	// list of possible Reasons, see
	// [Warning Flags (Verdict Reasons)](https://stytch.com/docs/docs/fraud/guides/device-fingerprinting/reference/warning-flags-verdict-reasons).
	Reasons []string `json:"reasons,omitempty"`
	// DetectedDeviceType: The operating system and architecture that took the fingerprint.
	DetectedDeviceType string `json:"detected_device_type,omitempty"`
	// IsAuthenticDevice: The assessment of whether this is an authentic device. It will be false if hardware
	// or browser deception is detected.
	IsAuthenticDevice bool `json:"is_authentic_device,omitempty"`
	// RuleMatchType: The type of rule match that was applied (e.g. `VISITOR_ID`), if any. This field will only
	// be present if there is a `RULE_MATCH` reason in the list of verdict reasons.
	RuleMatchType *RuleType `json:"rule_match_type,omitempty"`
	// RuleMatchIdentifier: The rule that was applied (e.g. a specific visitor ID value), if any. This field
	// will only be present if there is a `RULE_MATCH` reason in the list of verdict reasons.
	RuleMatchIdentifier string `json:"rule_match_identifier,omitempty"`
}

type RuleAction string

const (
	RuleActionALLOW     RuleAction = "ALLOW"
	RuleActionCHALLENGE RuleAction = "CHALLENGE"
	RuleActionBLOCK     RuleAction = "BLOCK"
	RuleActionNONE      RuleAction = "NONE"
)

type RuleType string

const (
	RuleTypeVISITORID           RuleType = "VISITOR_ID"
	RuleTypeBROWSERID           RuleType = "BROWSER_ID"
	RuleTypeVISITORFINGERPRINT  RuleType = "VISITOR_FINGERPRINT"
	RuleTypeBROWSERFINGERPRINT  RuleType = "BROWSER_FINGERPRINT"
	RuleTypeHARDWAREFINGERPRINT RuleType = "HARDWARE_FINGERPRINT"
	RuleTypeNETWORKFINGERPRINT  RuleType = "NETWORK_FINGERPRINT"
	RuleTypeCIDRBLOCK           RuleType = "CIDR_BLOCK"
	RuleTypeASN                 RuleType = "ASN"
	RuleTypeCOUNTRYCODE         RuleType = "COUNTRY_CODE"
)

type VerdictAction string

const (
	VerdictActionALLOW     VerdictAction = "ALLOW"
	VerdictActionCHALLENGE VerdictAction = "CHALLENGE"
	VerdictActionBLOCK     VerdictAction = "BLOCK"
)
