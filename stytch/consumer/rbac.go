package consumer

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"time"

	"github.com/stytchauth/stytch-go/v16/stytch"
	"github.com/stytchauth/stytch-go/v16/stytch/consumer/rbac"
)

type RBACClient struct {
	C stytch.Client
}

func NewRBACClient(c stytch.Client) *RBACClient {
	return &RBACClient{
		C: c,
	}
}

func (c *RBACClient) Policy(
	ctx context.Context,
	body *rbac.PolicyParams,
) (*rbac.PolicyResponse, error) {
	headers := make(map[string][]string)

	var retVal rbac.PolicyResponse
	err := c.C.NewRequest(
		ctx,
		stytch.RequestParams{
			Method:      "GET",
			Path:        "/v1/rbac/policy",
			QueryParams: nil,
			Body:        nil,
			V:           &retVal,
			Headers:     headers,
		},
	)
	return &retVal, err
}

// MANUAL(PolicyCache)(TYPES)

type PolicyCache struct {
	rbacClient    *RBACClient
	policy        *rbac.Policy
	lastUpdatedAt time.Time
}

const refreshCadence = 5 * time.Minute

func NewPolicyCache(rbacClient *RBACClient) *PolicyCache {
	return &PolicyCache{rbacClient: rbacClient}
}

func (pc *PolicyCache) Get(ctx context.Context) (*rbac.Policy, error) {
	if pc.policy == nil || time.Since(pc.lastUpdatedAt) > refreshCadence {
		policyResp, err := pc.rbacClient.Policy(ctx, &rbac.PolicyParams{})
		if err != nil {
			return nil, err
		}

		pc.policy = policyResp.Policy
		pc.lastUpdatedAt = time.Now()
	}
	return pc.policy, nil
}

// ENDMANUAL(PolicyCache)
