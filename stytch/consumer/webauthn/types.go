package webauthn

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"github.com/stytchauth/stytch-go/v8/stytch/consumer/sessions"
	"github.com/stytchauth/stytch-go/v8/stytch/consumer/users"
)

// AuthenticateParams: Request type for `Authenticate`.
// Fields:
//
//   - PublicKeyCredential: The response of the
//     [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential).
//
//   - SessionToken: The `session_token` associated with a User's existing Session.
//
//   - SessionDurationMinutes: Set the session lifetime to be this many minutes from now. This will start a
//     new session if one doesn't already exist,
//     returning both an opaque `session_token` and `session_jwt` for this session. Remember that the
//     `session_jwt` will have a fixed lifetime of
//     five minutes regardless of the underlying session duration, and will need to be refreshed over time.
//
//     This value must be a minimum of 5 and a maximum of 527040 minutes (366 days).
//
//     If a `session_token` or `session_jwt` is provided then a successful authentication will continue to
//     extend the session this many minutes.
//
//     If the `session_duration_minutes` parameter is not specified, a Stytch session will not be created.
//
//   - SessionJWT: The `session_jwt` associated with a User's existing Session.
//
//   - SessionCustomClaims: Add a custom claims map to the Session being authenticated. Claims are only
//     created if a Session is initialized by providing a value in `session_duration_minutes`. Claims will be
//     included on the Session object and in the JWT. To update a key in an existing Session, supply a new
//     value. To delete a key, supply a null value.
//
//     Custom claims made with reserved claims ("iss", "sub", "aud", "exp", "nbf", "iat", "jti") will be
//     ignored. Total custom claims size cannot exceed four kilobytes.
type AuthenticateParams struct {
	PublicKeyCredential    string         `json:"public_key_credential,omitempty"`
	SessionToken           string         `json:"session_token,omitempty"`
	SessionDurationMinutes int32          `json:"session_duration_minutes,omitempty"`
	SessionJWT             string         `json:"session_jwt,omitempty"`
	SessionCustomClaims    map[string]any `json:"session_custom_claims,omitempty"`
}

// AuthenticateStartParams: Request type for `AuthenticateStart`.
// Fields:
//   - UserID: The `user_id` of an active user the WebAuthn registration should be tied to.
//   - Domain: The domain for WebAuthn. Defaults to `window.location.hostname`.
type AuthenticateStartParams struct {
	UserID string `json:"user_id,omitempty"`
	Domain string `json:"domain,omitempty"`
}

// RegisterParams: Request type for `Register`.
// Fields:
//   - UserID: The `user_id` of an active user the WebAuthn registration should be tied to.
//   - PublicKeyCredential: The response of the
//     [navigator.credentials.create()](https://www.w3.org/TR/webauthn-2/#sctn-createCredential).
type RegisterParams struct {
	UserID              string `json:"user_id,omitempty"`
	PublicKeyCredential string `json:"public_key_credential,omitempty"`
}

// RegisterStartParams: Request type for `RegisterStart`.
// Fields:
//   - UserID: The `user_id` of an active user the WebAuthn registration should be tied to.
//   - Domain: The domain for WebAuthn. Defaults to `window.location.hostname`.
//   - UserAgent: The user agent of the User.
//   - AuthenticatorType: The requested authenticator type of the WebAuthn device. The two valid value are
//     platform and cross-platform. If no value passed, we assume both values are allowed.
type RegisterStartParams struct {
	UserID            string `json:"user_id,omitempty"`
	Domain            string `json:"domain,omitempty"`
	UserAgent         string `json:"user_agent,omitempty"`
	AuthenticatorType string `json:"authenticator_type,omitempty"`
}

// AuthenticateResponse: Response type for `Authenticate`.
// Fields:
//
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//
//   - UserID: The unique ID of the affected User.
//
//   - WebauthnRegistrationID: The unique ID for the WebAuthn registration.
//
//   - SessionToken: A secret token for a given Stytch Session.
//
//   - SessionJWT: The JSON Web Token (JWT) for a given Stytch Session.
//
//   - User: The `user` object affected by this API call. See the [Get user
//     endpoint](https://invalid.dev.stytch.com/docs/api/get-user) for complete response field details.
//
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
//
//   - Session: If you initiate a Session, by including `session_duration_minutes` in your authenticate
//     call, you'll receive a full Session object in the response.
//
//     See [GET sessions](https://stytch.com/docs/api/session-get) for complete response fields.
type AuthenticateResponse struct {
	RequestID              string           `json:"request_id,omitempty"`
	UserID                 string           `json:"user_id,omitempty"`
	WebauthnRegistrationID string           `json:"webauthn_registration_id,omitempty"`
	SessionToken           string           `json:"session_token,omitempty"`
	SessionJWT             string           `json:"session_jwt,omitempty"`
	User                   users.User       `json:"user,omitempty"`
	StatusCode             int32            `json:"status_code,omitempty"`
	Session                sessions.Session `json:"session,omitempty"`
}

// AuthenticateStartResponse: Response type for `AuthenticateStart`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - PublicKeyCredentialRequestOptions: Options used for WebAuthn authentication.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type AuthenticateStartResponse struct {
	RequestID                         string `json:"request_id,omitempty"`
	UserID                            string `json:"user_id,omitempty"`
	PublicKeyCredentialRequestOptions string `json:"public_key_credential_request_options,omitempty"`
	StatusCode                        int32  `json:"status_code,omitempty"`
}

// RegisterResponse: Response type for `Register`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - WebauthnRegistrationID: The unique ID for the WebAuthn registration.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type RegisterResponse struct {
	RequestID              string `json:"request_id,omitempty"`
	UserID                 string `json:"user_id,omitempty"`
	WebauthnRegistrationID string `json:"webauthn_registration_id,omitempty"`
	StatusCode             int32  `json:"status_code,omitempty"`
}

// RegisterStartResponse: Response type for `RegisterStart`.
// Fields:
//   - RequestID: Globally unique UUID that is returned with every API call. This value is important to log
//     for debugging purposes; we may ask for this value to help identify a specific API call when helping you
//     debug an issue.
//   - UserID: The unique ID of the affected User.
//   - PublicKeyCredentialCreationOptions: Options used for WebAuthn registration.
//   - StatusCode: The HTTP status code of the response. Stytch follows standard HTTP response status code
//     patterns, e.g. 2XX values equate to success, 3XX values are redirects, 4XX are client errors, and 5XX
//     are server errors.
type RegisterStartResponse struct {
	RequestID                          string `json:"request_id,omitempty"`
	UserID                             string `json:"user_id,omitempty"`
	PublicKeyCredentialCreationOptions string `json:"public_key_credential_creation_options,omitempty"`
	StatusCode                         int32  `json:"status_code,omitempty"`
}
