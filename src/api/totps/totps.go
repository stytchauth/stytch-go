package totps

// !!!
// WARNING: This file is autogenerated
// Only modify code within MANUAL() sections
// or your changes may be overwritten later!
// !!!

import (
	"context"
	"encoding/json"

	"github.com/stytchauth/stytch-go/v7/stytch"
	"github.com/stytchauth/stytch-go/v7/stytch/stytcherror"
)

type Client struct {
	C *stytch.Client
}

const subURL = "totps"

func (c *Client) Create(
	ctx context.Context,
	body *stytch.CreateParams,
) (*stytch.CreateResponse, error) {
	path := subURL + "//v1/totps"

	var retVal stytch.CreateResponse
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("Oops, something seems to have gone wrong marshalling the request body")
		}
	}

	err = c.C.NewRequest(ctx, "POST", path, nil, jsonBody, &retVal)

	return &retVal, err
}

func (c *Client) Authenticate(
	ctx context.Context,
	body *stytch.AuthenticateParams,
) (*stytch.AuthenticateResponse, error) {
	path := subURL + "//v1/totps/authenticate"

	var retVal stytch.AuthenticateResponse
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("Oops, something seems to have gone wrong marshalling the request body")
		}
	}

	err = c.C.NewRequest(ctx, "POST", path, nil, jsonBody, &retVal)

	return &retVal, err
}

func (c *Client) Recoverycodes(
	ctx context.Context,
	body *stytch.RecoverycodesParams,
) (*stytch.RecoverycodesResponse, error) {
	path := subURL + "//v1/totps/recovery_codes"

	var retVal stytch.RecoverycodesResponse
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("Oops, something seems to have gone wrong marshalling the request body")
		}
	}

	err = c.C.NewRequest(ctx, "POST", path, nil, jsonBody, &retVal)

	return &retVal, err
}

func (c *Client) Recover(
	ctx context.Context,
	body *stytch.RecoverParams,
) (*stytch.RecoverResponse, error) {
	path := subURL + "//v1/totps/recover"

	var retVal stytch.RecoverResponse
	var jsonBody []byte
	var err error
	if body != nil {
		jsonBody, err = json.Marshal(body)
		if err != nil {
			return nil, stytcherror.NewClientLibraryError("Oops, something seems to have gone wrong marshalling the request body")
		}
	}

	err = c.C.NewRequest(ctx, "POST", path, nil, jsonBody, &retVal)

	return &retVal, err
}
