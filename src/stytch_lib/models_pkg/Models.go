/*
 * stytch_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg



/*
 * Structure for the custom type Attributes
 */
type Attributes struct {
    IpAddress       *string         `json:"ip_address,omitempty" form:"ip_address,omitempty"` //The ip address of the user.
    UserAgent       *string         `json:"user_agent,omitempty" form:"user_agent,omitempty"` //The user agent of the user.
}

/*
 * Structure for the custom type UserCreate
 */
type UserCreate struct {
    Email           string          `json:"email" form:"email"` //The email to use for email magic links. This can be changed later via the update endpoint.
    Name            *Name           `json:"name,omitempty" form:"name,omitempty"` //TODO: Write general description for this field
    Attributes      *Attributes     `json:"attributes,omitempty" form:"attributes,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UserCreateResponse
 */
type UserCreateResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
    EmailId         *string         `json:"email_id,omitempty" form:"email_id,omitempty"` //The id for the created email.
}

/*
 * Structure for the custom type UserUpdate
 */
type UserUpdate struct {
    Name            *Name1          `json:"name,omitempty" form:"name,omitempty"` //If at least one name field is passed, all name fields will be updated.
    Emails          []*Email4       `json:"emails,omitempty" form:"emails,omitempty"` //Multiple emails can exist for one user. Add additional emails via this endpoint. To delete an email, use the delete endpoint.
    Attributes      *Attributes     `json:"attributes,omitempty" form:"attributes,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UserUpdateResponse
 */
type UserUpdateResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
    Emails          []*Email1       `json:"emails,omitempty" form:"emails,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UserGetResponse
 */
type UserGetResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
    Name            *Name2          `json:"name,omitempty" form:"name,omitempty"` //TODO: Write general description for this field
    Emails          []*Email1       `json:"emails,omitempty" form:"emails,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UserDeleteResponse
 */
type UserDeleteResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type UserEmailDeleteResponse
 */
type UserEmailDeleteResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
    EmailId         *string         `json:"email_id,omitempty" form:"email_id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type SendVerificationResponse
 */
type SendVerificationResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type VerifyEmailResponse
 */
type VerifyEmailResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    EmailId         *string         `json:"email_id,omitempty" form:"email_id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type MagicLinkSend
 */
type MagicLinkSend struct {
    UserId             string          `json:"user_id" form:"user_id"` //TODO: Write general description for this field
    MethodId           string          `json:"method_id" form:"method_id"` //The method id for where to send the magic link, such as an email_id.
    MagicLinkUrl       *string         `json:"magic_link_url,omitempty" form:"magic_link_url,omitempty"` //The url the user clicks from the email magic link. This should be a url that your app receives and parses and subsequently send an api request to authenticate the magic link and log in the user.
    ExpirationMinutes  *int64          `json:"expiration_minutes,omitempty" form:"expiration_minutes,omitempty"` //Set the expiration for the email magic link, in minutes. By default, it expires in 1 hour. The minimum expiration is 5 minutes and the maximum is 7 days (10080 mins).
    TemplateId         *string         `json:"template_id,omitempty" form:"template_id,omitempty"` //The template id to use for the magic link, for example the template_id that corresponds to a specific email format.
    Attributes         *Attributes     `json:"attributes,omitempty" form:"attributes,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type MagicLinkSendResponse
 */
type MagicLinkSendResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type MagicLinkSendByEmail
 */
type MagicLinkSendByEmail struct {
    Email              string          `json:"email" form:"email"` //The email the user enters to sign in with.
    MagicLinkUrl       *string         `json:"magic_link_url,omitempty" form:"magic_link_url,omitempty"` //The url the user clicks from the email magic link. This should be a url that your app receives and parses and subsequently send an api request to authenticate the magic link and log in the user.
    ExpirationMinutes  *int64          `json:"expiration_minutes,omitempty" form:"expiration_minutes,omitempty"` //Set the expiration for the email magic link, in minutes. By default, it expires in 1 hour. The minimum expiration is 5 minutes and the maximum is 7 days (10080 mins).
    TemplateId         *string         `json:"template_id,omitempty" form:"template_id,omitempty"` //The template id to use for the magic link, for example the template_id that corresponds to a specific email format.
    Attributes         *Attributes     `json:"attributes,omitempty" form:"attributes,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type MagicLinkSendByEmailResponse
 */
type MagicLinkSendByEmailResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type MagicLinkAuthenticate
 */
type MagicLinkAuthenticate struct {
    Options         *Options        `json:"options,omitempty" form:"options,omitempty"` //TODO: Write general description for this field
    Attributes      *Attributes     `json:"attributes,omitempty" form:"attributes,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Email
 */
type Email struct {
    EmailId         *string         `json:"email_id,omitempty" form:"email_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type MagicLinkAuthenticateResponse
 */
type MagicLinkAuthenticateResponse struct {
    RequestId       *string         `json:"request_id,omitempty" form:"request_id,omitempty"` //TODO: Write general description for this field
    UserId          *string         `json:"user_id,omitempty" form:"user_id,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Email1
 */
type Email1 struct {
    EmailId         *string         `json:"email_id,omitempty" form:"email_id,omitempty"` //TODO: Write general description for this field
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //TODO: Write general description for this field
    Verified        *bool           `json:"verified,omitempty" form:"verified,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Email4
 */
type Email4 struct {
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //An email for the user.
}

/*
 * Structure for the custom type Name
 */
type Name struct {
    FirstName       *string         `json:"firstName,omitempty" form:"firstName,omitempty"` //The first name of the user.
    MiddleName      *string         `json:"middleName,omitempty" form:"middleName,omitempty"` //The middle name(s) of the user.
    LastName        *string         `json:"lastName,omitempty" form:"lastName,omitempty"` //The last name of the user.
}

/*
 * Structure for the custom type Name1
 */
type Name1 struct {
    FirstName       *string         `json:"firstName,omitempty" form:"firstName,omitempty"` //The first name of the user. Replaces an existing first name, if it exists.
    MiddleName      *string         `json:"middleName,omitempty" form:"middleName,omitempty"` //The middle name(s) of the user. Replaces an existing middle name, if it exists.
    LastName        *string         `json:"lastName,omitempty" form:"lastName,omitempty"` //The last name of the user. Replaces an existing last name, if it exists.
}

/*
 * Structure for the custom type Name2
 */
type Name2 struct {
    FirstName       *string         `json:"firstName,omitempty" form:"firstName,omitempty"` //TODO: Write general description for this field
    MiddleName      *string         `json:"middleName,omitempty" form:"middleName,omitempty"` //TODO: Write general description for this field
    LastName        *string         `json:"lastName,omitempty" form:"lastName,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Options
 */
type Options struct {
    IpMatchRequired           *bool           `json:"ip_match_required,omitempty" form:"ip_match_required,omitempty"` //Require that the ip address the magic link was requested from matches the ip address it's clicked from.
    UserAgentMatchRequired    *bool           `json:"user_agent_match_required,omitempty" form:"user_agent_match_required,omitempty"` //Require that the user agent the magic link was requested from matches the user agent it's clicked from.
}
